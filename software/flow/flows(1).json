[
    {
        "id": "f0ce8419681cf781",
        "type": "tab",
        "label": "Prusa-MK4-1-Shelly-04",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "emonPI energy sensor",
        "disabled": true,
        "info": ""
    },
    {
        "id": "e83f6f0b92151d65",
        "type": "tab",
        "label": "Shelly sensor",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c970b824705576f5",
        "type": "tab",
        "label": "air gradient sensor",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ddc4b1ce3b4622c8",
        "type": "tab",
        "label": "Manual Model Training",
        "disabled": true,
        "info": "### Manual Model Training Flow\r\n\r\n**Purpose:** Provides a simple one-click interface to retrain the machine learning model.\r\n\r\n**Process:**\r\n1.  **Trigger:** Manually click the inject node's button.\r\n2.  **Export Data:** Executes `export_training_data.py` to create a fresh `printer_energy_data_raw.csv` from the database.\r\n3.  **Train Model:** If the export is successful, it executes `train_model.py` to train a new model on the fresh data and save the assets (`best_model.joblib`, `scaler.joblib`, etc.).\r\n4.  **Feedback:** All output (`stdout`) and errors (`stderr`) from the scripts are logged to the Debug sidebar.",
        "env": []
    },
    {
        "id": "ac9683af7e82fb53",
        "type": "tab",
        "label": "Analysis API",
        "disabled": true,
        "info": "**Purpose:** This flow provides the backend API endpoint (`/api/analyze`) for the \"Energy Analysis Dashboard\" frontend page. It is responsible for fetching a detailed time-series dataset based on user selections, running a complex Python script to perform statistical and machine learning analysis, and returning the results to the user for visualization.",
        "env": []
    },
    {
        "id": "3248d6a231f4e9d0",
        "type": "tab",
        "label": "Live Predictor (Optimized)",
        "disabled": true,
        "info": "**Purpose:** This flow runs on a schedule to generate real-time power consumption predictions for all active Prusa printers. It uses a pre-trained machine learning model to make these predictions. The results are stored in the `ml_predictions` table, which allows Grafana to display a \"Predicted vs. Actual\" power graph.",
        "env": []
    },
    {
        "id": "c4582a5c3c4d6d09",
        "type": "tab",
        "label": "Master Ingestion Flow",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "088fab733419c707",
        "type": "tab",
        "label": "Historical Enrichment",
        "disabled": true,
        "info": "**Purpose:** This flow acts as a dedicated sub-routine for printers managed by the SimplyPrint cloud service. Its primary goal is to enrich the print job data with detailed information that is not available in the initial, high-level status poll.\r\n\r\n**Triggered By:** The \"Call Job Detail Subflow\" `link out` node in the `Master Ingestion Flow`.\r\n\r\n**Process:**\r\n1.  Receives live printer data and triggers a detailed API call to SimplyPrint for the currently active job.\r\n2.  Merges this detailed job data (which includes `customFields`, filament usage, etc.) with the live status.\r\n3.  Detects job start/end transitions to trigger energy calculations.\r\n4.  Triggers the G-code download and analysis process to get thumbnails and per-part data.\r\n5.  Outputs standardized messages to the main flow's `Data Output` section to update the `print_jobs` and `printer_status` tables.",
        "env": []
    },
    {
        "id": "bc5759d43e341d79",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3272a31eb99f97fd",
        "type": "subflow",
        "name": "parse shelly data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b71a7b0247b9a82f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "b71a7b0247b9a82f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d217b2feb7bbec18",
        "type": "subflow",
        "name": "calculate energy from power",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "b2796d317002a176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 80,
                "wires": [
                    {
                        "id": "b3dd881c1c8f59a3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "af252d67b3d423b1",
        "type": "subflow",
        "name": "Not PRINTING reset",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "20722fdac233c3b4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "20722fdac233c3b4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b919a24d273b092a",
        "type": "subflow",
        "name": "process printer data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "4397b54032687aba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "4397b54032687aba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fc341e58f36836a4",
        "type": "subflow",
        "name": "process MK3S data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "06ff291394c7c287"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 40,
                "wires": [
                    {
                        "id": "06ff291394c7c287",
                        "port": 0
                    }
                ]
            },
            {
                "x": 540,
                "y": 140,
                "wires": [
                    {
                        "id": "acd98823866bc9b7",
                        "port": 1
                    }
                ]
            },
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "acd98823866bc9b7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c42ae1f553f7a324",
        "type": "subflow",
        "name": "parse tasmota data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c876e538a0499711"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "c876e538a0499711",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "771a9640986df080",
        "type": "subflow",
        "name": "parse file_name",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3b21d965959dafab"
                    },
                    {
                        "id": "114b0ce777307343"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "16a01fbbb8a7c7c0",
                        "port": 0
                    },
                    {
                        "id": "c65a58d2f0768004",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "662a52ee1464ec2c",
        "type": "subflow",
        "name": "process energy",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 500,
                "wires": [
                    {
                        "id": "fb2a5b46a0533104"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 500,
                "wires": [
                    {
                        "id": "8535ffa692521c32",
                        "port": 0
                    },
                    {
                        "id": "5d0cb12b6f5ceefc",
                        "port": 0
                    },
                    {
                        "id": "bf97737c25218234",
                        "port": 0
                    },
                    {
                        "id": "f18adb8c5a5c7edf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1133890aa08bbfb7",
        "type": "subflow",
        "name": "energy monitor",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3cb4a658c2fdfc87"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "5fcf80fa8461bed3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "15c02bcbea060190",
        "type": "subflow",
        "name": "process PrusaMINI data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "95265fbfb5cc4039"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "95265fbfb5cc4039",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "26dc589d0b7e3f06",
        "type": "subflow",
        "name": "process printer data (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "18b86d7a0a7b8f9b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "18b86d7a0a7b8f9b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b56f3ebbdd287ae6",
        "type": "subflow",
        "name": "process printer data (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "2c49483376d9bcf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "2c49483376d9bcf8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4eb801c5feee1f98",
        "type": "subflow",
        "name": "process printer data (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8b5faa98556cb813"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "8b5faa98556cb813",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d5c353d21ed681c9",
        "type": "subflow",
        "name": "energy monitor (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "7d081b124596da9b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "10653d742cbba641",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f36865a9b0367ee5",
        "type": "subflow",
        "name": "process printer data (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8cabd656481a12ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "8cabd656481a12ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "271e8c6d30455066",
        "type": "subflow",
        "name": "energy monitor (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9089812951b8c914"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "2f62398aad3a4a1d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f0d623925ac07e2d",
        "type": "subflow",
        "name": "process printer data (6)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d7e347fd1dbf912a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "d7e347fd1dbf912a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "192b2bd79f1cc9d1",
        "type": "subflow",
        "name": "energy monitor (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "32fe707fbf8dad54"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "dcd322b39e0146a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b1bed7a2a4a4d39a",
        "type": "group",
        "z": "c4582a5c3c4d6d09",
        "name": "Data Input & Routing",
        "style": {
            "label": true
        },
        "nodes": [
            "02ea663491d7ef4b",
            "3bf69c618d3771ca",
            "b27da203e5c23ee9",
            "f4ec324598c62401",
            "ea15470d20a551d0",
            "2ad6a970bba49d5f",
            "f297e1970a6e9404",
            "5dda7fb58e2cb2a2",
            "9745ef2b3e3aa7e2",
            "e4a60772850676ff",
            "574260bbc0dc2b2f",
            "f3858a8857ffde13",
            "d43ff076a1a9a7bf",
            "b9a4c25e40aeeef0",
            "d72cfa8a09b4ac1a",
            "8df1e9e0aa3c3d82",
            "153a9432435bf76b",
            "23ca3a3983ca05ef",
            "7633245e76a0f219",
            "18c9e99643ee6bcd",
            "7e24e1bcd17d804e",
            "fa5fe3526a66b815",
            "ad0abf33e2e61735",
            "08941a4001c4ec9a"
        ],
        "x": 14,
        "y": 59,
        "w": 1652,
        "h": 702
    },
    {
        "id": "39cad17b39cec1d1",
        "type": "group",
        "z": "c4582a5c3c4d6d09",
        "name": "Data Processing & Enrichment",
        "style": {
            "stroke": "#0070c0",
            "label": true
        },
        "nodes": [
            "3bc77aad3c1f970d",
            "6d7486e2afc97f13",
            "9fb13978446f7b8a",
            "8b6805e59ca0e048",
            "e5f04ef6f5bc94fc",
            "81d3cb6157d204a7",
            "38850782ee90eabb",
            "bfb231c8765823a8",
            "76e36f5c70691ad5",
            "76faa27c3f22fa95",
            "6f5a6bdde6455ef0",
            "abc0bca12f6f89e4",
            "721f5a33a2061419",
            "f81e90cc3d42a0f9",
            "52a6268367a8d644",
            "af3255605d249b0d",
            "075caf0daf376cc6",
            "de12c14d1a3c57d5",
            "f56cc50a4481ddce",
            "31b1ea47700de376",
            "4958a8c7f64eaabd",
            "af950d41f1c8252e",
            "b8edd70e91510d03",
            "19af9013e2ec06d3",
            "cb5a40c591c23af4",
            "95202ab5fa233a47",
            "cda295997d384d1b",
            "1a68329a7809840d",
            "853372a55c401c65"
        ],
        "x": 1714,
        "y": 419,
        "w": 2112,
        "h": 722,
        "info": "This group takes the raw API data, parses it, standardizes it, detects job state changes, and triggers further enrichment processes."
    },
    {
        "id": "5f3f1baac114fb7c",
        "type": "group",
        "z": "c4582a5c3c4d6d09",
        "name": "Data Output",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "bf152e33e1198b2b",
            "af2f0b8c71e0ef6c",
            "711e7c68cc8edf38",
            "f571406301ee9470",
            "526fc8f040df3cba"
        ],
        "x": 2774,
        "y": 59,
        "w": 552,
        "h": 322
    },
    {
        "id": "d46e71e1a4ec093a",
        "type": "group",
        "z": "088fab733419c707",
        "name": "Data Input & API Call",
        "style": {
            "label": true
        },
        "nodes": [
            "31749266865874cf",
            "9253f90316936f73",
            "4582f5ee6c82a831",
            "856d2b19e2a0d021",
            "bc7506c79a70c5d8"
        ],
        "x": 234,
        "y": 239,
        "w": 752,
        "h": 362
    },
    {
        "id": "2406f1dc5d32b76a",
        "type": "group",
        "z": "088fab733419c707",
        "name": "Data Processing & Output Triggering",
        "style": {
            "label": true
        },
        "nodes": [
            "4abf6ef935ae28bb",
            "566c89287199eab1",
            "d980d78960bfd999",
            "235f4c81c8825e75",
            "11be79141838bc02"
        ],
        "x": 1074,
        "y": 319,
        "w": 652,
        "h": 242
    },
    {
        "id": "ec87e2210a0fba2e",
        "type": "group",
        "z": "088fab733419c707",
        "name": "G-code Analysis Pipeline",
        "style": {
            "label": true
        },
        "nodes": [
            "548b0a238325e0b8",
            "70cdf05dcd27462d",
            "7ac7a420743ace0c",
            "1895161b40f4b2c6",
            "a849c171e8e54fe4",
            "637017bc129598ca",
            "00554013c989e511",
            "8e468d1a2e629d6c",
            "c8a9510c9ac279b9"
        ],
        "x": 1434,
        "y": 619,
        "w": 712,
        "h": 422
    },
    {
        "id": "d76b67f52caa79d8",
        "type": "group",
        "z": "ac9683af7e82fb53",
        "name": "Data Input",
        "style": {
            "label": true
        },
        "nodes": [
            "3c0faef18754c38b",
            "3c629dbcef759df6",
            "d734b8886640f707",
            "4026a26420161c57"
        ],
        "x": 14,
        "y": 459,
        "w": 712,
        "h": 202
    },
    {
        "id": "98098bf0a6ab5a91",
        "type": "group",
        "z": "ac9683af7e82fb53",
        "name": "Data Processing",
        "style": {
            "label": true
        },
        "nodes": [
            "7d9f73b18b360ff0",
            "0dce62424bc31c09",
            "baa83abab59cfda0",
            "37a1301db44207e7",
            "8f4f788b6f9a70f6",
            "e037662c792c8b69",
            "e2b79e983f704ce5",
            "32c2bbb9b7e94930",
            "65d041650de3e522"
        ],
        "x": 374,
        "y": 139,
        "w": 1432,
        "h": 322
    },
    {
        "id": "ffc9bf786a9053df",
        "type": "group",
        "z": "ac9683af7e82fb53",
        "name": "Data Output",
        "style": {
            "label": true,
            "stroke": "#0070c0"
        },
        "nodes": [
            "637a8110bd1b6c3d",
            "1f4c324b592f4ed2",
            "64ef9337f1633831",
            "5e31f106a013a9ed",
            "877b7c14c4f7e38a"
        ],
        "x": 1934,
        "y": 259,
        "w": 992,
        "h": 302
    },
    {
        "id": "7f301413b976a511",
        "type": "group",
        "z": "f0ce8419681cf781",
        "name": "G-code Analysis Pipeline",
        "style": {
            "label": true
        },
        "nodes": [
            "f8539a89ec961210",
            "6a9165f91d6f86cd",
            "cad1c3267f41eb3e",
            "5d27644c9f51158a",
            "bedaf0ada87d7430",
            "f502150fe2e9f17a",
            "9340bf3669d8e55d",
            "0806d1ca68fe780f",
            "6e7d284cb10c8866"
        ],
        "x": 1614,
        "y": 39,
        "w": 772,
        "h": 442
    },
    {
        "id": "7967f8d300e7cb63",
        "type": "mqtt-broker",
        "name": "emonPI-energy-sensor",
        "broker": "192.168.188.161",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a0bedc1d1fa7092d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDb-microfactory-pi",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.188.199:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "005dc930a4cd13ec",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "af889725daaa1ec0",
        "type": "mqtt-broker",
        "name": "Shelly ",
        "broker": "192.168.188.199",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8488c86c5663f3ba",
        "type": "mqtt-broker",
        "name": "dockerised kodi-pi",
        "broker": "kodi-pi.zenr.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2f7664b28c919cfe",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b71a7b0247b9a82f",
        "type": "function",
        "z": "3272a31eb99f97fd",
        "name": "parse shelly data",
        "func": "var payload_output = {payload: {}}\n\npayload_output.payload.shelly_state = Boolean(msg.payload.output);\nglobal.set('shelly_power', Number(msg.payload.apower));\npayload_output.payload.power = Number(msg.payload.apower);\npayload_output.payload.current = Number(msg.payload.current);\npayload_output.topic = msg.topic;\n\nvar voltage = Number(msg.payload.voltage);\nif (voltage != 0) payload_output.payload.voltage = voltage;\n\nreturn payload_output;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1e5753edf7e4be6e",
        "type": "watt2kwh",
        "z": "d217b2feb7bbec18",
        "format": "wh",
        "maximum": "60",
        "maximumunit": "mins",
        "name": "",
        "x": 440,
        "y": 80,
        "wires": [
            [
                "b3dd881c1c8f59a3"
            ]
        ]
    },
    {
        "id": "b2796d317002a176",
        "type": "change",
        "z": "d217b2feb7bbec18",
        "name": "get apower",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.apower",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "1e5753edf7e4be6e"
            ]
        ]
    },
    {
        "id": "b3dd881c1c8f59a3",
        "type": "change",
        "z": "d217b2feb7bbec18",
        "name": "set payload.energy",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.energy",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "20722fdac233c3b4",
        "type": "function",
        "z": "af252d67b3d423b1",
        "name": "function 1",
        "func": "if (msg.payload.state != \"PRINTING\"){\n    msg.reset = 1;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4397b54032687aba",
        "type": "function",
        "z": "b919a24d273b092a",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\n//msg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "06ff291394c7c287",
        "type": "function",
        "z": "fc341e58f36836a4",
        "name": "parse MK3S data",
        "func": "var printer_state = String(msg.payload.printer.state);\nvar plugenergy = global.get('mk3s-1-energy');\n\nif (printer_state != \"PRINTING\")\n    return {\n        payload: {\n            state: printer_state,\n            printertype: String(msg.printertype),\n            plug_energy: Number(plugenergy),\n            simple_state: \"IDLE\"\n        }\n    };\n\nvar printer = msg.payload.printer;\nvar job = msg.payload.job;\nvar file = msg.payload.fileinfo;\n\nreturn {\n    payload: {\n        free_space: Number(msg.payload.storage[0].free_space),\n        state: printer_state,\n        simple_state: \"PRINTING\",\n        temp_nozzle: Number(printer.temp_nozzle),\n        target_nozzle: Number(printer.target_nozzle),\n        temp_bed: Number(printer.temp_bed),\n        target_bed: Number(printer.target_bed),\n        flow: Number(printer.flow),\n        speed: Number(printer.speed),\n        job_id: Number(job.id),\n        job_progress: Number(job.progress),\n        job_time_remaining: Number(job.time_remaining),\n        job_time_printing: Number(job.time_printing),\n        // file_name: String(file.display_name)\n        }\n    };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "acd98823866bc9b7"
            ]
        ]
    },
    {
        "id": "acd98823866bc9b7",
        "type": "switch",
        "z": "fc341e58f36836a4",
        "name": "",
        "property": "payload.simple_state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRINTING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IDLE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c876e538a0499711",
        "type": "function",
        "z": "c42ae1f553f7a324",
        "name": "parse tasmota-shelly data",
        "func": "var payload_output = { payload: {} }\n\npayload_output.payload.power = Number(msg.payload.ENERGY.Power);\npayload_output.payload.current = Number(msg.payload.ENERGY.Current);\n\nvar voltage = Number(msg.payload.ENERGY.Voltage);\nif (voltage != 0) payload_output.payload.voltage = voltage;\n\nreturn payload_output;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "16a01fbbb8a7c7c0",
        "type": "function",
        "z": "771a9640986df080",
        "name": "function 3",
        "func": "\nglobal.set('filename', msg.payload.job.filename); \nglobal.set('job-id',msg.payload.id);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3b21d965959dafab",
        "type": "switch",
        "z": "771a9640986df080",
        "name": "mk3s filename",
        "property": "payload.job.filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 220,
        "y": 40,
        "wires": [
            [
                "16a01fbbb8a7c7c0"
            ]
        ]
    },
    {
        "id": "114b0ce777307343",
        "type": "switch",
        "z": "771a9640986df080",
        "name": "mini filename",
        "property": "payload.file.display_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 120,
        "wires": [
            [
                "c65a58d2f0768004"
            ]
        ]
    },
    {
        "id": "c65a58d2f0768004",
        "type": "function",
        "z": "771a9640986df080",
        "name": "function 8",
        "func": "global.set('filename', msg.payload.file.display_name);\nglobal.set('job-id',msg.payload.id);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fb2a5b46a0533104",
        "type": "switch",
        "z": "662a52ee1464ec2c",
        "name": "printer type",
        "property": "printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 310,
        "y": 500,
        "wires": [
            [
                "8535ffa692521c32"
            ],
            [
                "5d0cb12b6f5ceefc"
            ],
            [
                "bf97737c25218234"
            ],
            [
                "f18adb8c5a5c7edf"
            ]
        ]
    },
    {
        "id": "8535ffa692521c32",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_prusamini') == undefined) {\n    context.set('startenergy_prusamini', 0);\n}\n\nif (context.get('stopenergy_prusamini') == undefined) {\n    context.set('stopenergy_prusamini', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_prusamini');\nlet stopenergy = context.get('stopenergy_prusamini');\n\nnode.warn(startenergy);\nnode.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mini-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mini-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(msg.payload.filename_name),\n            job_energy: Number(calculatedEnergy)\n        }\n        \n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_prusamini', startenergy);\ncontext.set('stopenergy_prusamini', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d0cb12b6f5ceefc",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-1",
        "func": "var filename = global.get('filename');\n// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-1') == undefined) {\n    context.set('startenergy_mk3s-1', 0);\n}\n\nif (context.get('stopenergy_mk3s-1') == undefined) {\n    context.set('stopenergy_mk3s-1', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-1');\nlet stopenergy = context.get('stopenergy_mk3s-1');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-1-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-1-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-1', 0);\n    context.set('stopenergy_mk3s-1', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-1', startenergy);\ncontext.set('stopenergy_mk3s-1', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "bf97737c25218234",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-2",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-2') == undefined) {\n    context.set('startenergy_mk3s-2', 0);\n}\n\nif (context.get('stopenergy_mk3s-2') == undefined) {\n    context.set('stopenergy_mk3s-2', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-2');\nlet stopenergy = context.get('stopenergy_mk3s-2');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-2-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-2-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-2', 0);\n    context.set('stopenergy_mk3s-2', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-2', startenergy);\ncontext.set('stopenergy_mk3s-2', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f18adb8c5a5c7edf",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-3",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-3') == undefined) {\n    context.set('startenergy_mk3s-3', 0);\n}\n\nif (context.get('stopenergy_mk3s-3') == undefined) {\n    context.set('stopenergy_mk3s-3', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-3');\nlet stopenergy = context.get('stopenergy_mk3s-3');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-3-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-3-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-3', 0);\n    context.set('stopenergy_mk3s-3', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-3', startenergy);\ncontext.set('stopenergy_mk3s-3', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "3cb4a658c2fdfc87",
        "type": "switch",
        "z": "1133890aa08bbfb7",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "69d94f6aeefab018"
            ],
            [
                "1a8d663d816eba7c"
            ]
        ]
    },
    {
        "id": "69d94f6aeefab018",
        "type": "change",
        "z": "1133890aa08bbfb7",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "5fcf80fa8461bed3"
            ]
        ]
    },
    {
        "id": "1a8d663d816eba7c",
        "type": "change",
        "z": "1133890aa08bbfb7",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "5fcf80fa8461bed3"
            ]
        ]
    },
    {
        "id": "5fcf80fa8461bed3",
        "type": "function",
        "z": "1133890aa08bbfb7",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\nnode.warn(startenergy);\nnode.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n    // var job_name = msg.payload.file_name;\n    // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the complete msg object including payload and additional properties\n    if (stopenergy != 0 && startenergy != 0) {\n        msg.payload = {\n            job_id: Number(job_id),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy),\n            job_time: Number(msg.payload.time_printing)\n        };\n        return msg;\n    }\n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the complete msg object including payload and additional properties\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }\n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "95265fbfb5cc4039",
        "type": "function",
        "z": "15c02bcbea060190",
        "name": "parse MINI data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "18b86d7a0a7b8f9b",
        "type": "function",
        "z": "26dc589d0b7e3f06",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2c49483376d9bcf8",
        "type": "function",
        "z": "b56f3ebbdd287ae6",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8b5faa98556cb813",
        "type": "function",
        "z": "4eb801c5feee1f98",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\nvar output = {\n    payload: {\n        //type: \"PRUSA-MINI\",\n        printertype: String(msg.printertype),\n        measurement: String(msg.measurement),\n        state: String(msg.payload.printer.state),\n        //filename_name: String(msg.payload.project_name),\n        temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n        temp_bed: Number(msg.payload.printer.temp_bed),\n        flow: Number(msg.payload.printer.flow),\n        speed: Number(msg.payload.printer.speed),\n        //filament_status: String(msg.payload.filament_status)\n    },\n};\n\nif (output.payload.state == \"PRINTING\") {\n    msg.payload = {\n        //type: \"PRUSA-MINI\",\n        printertype: String(msg.printertype),\n        measurement: String(msg.measurement),\n        state: String(msg.payload.printer.state),\n        //filename_name: String(msg.payload.project_name),\n        temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n        temp_bed: Number(msg.payload.printer.temp_bed),\n        flow: Number(msg.payload.printer.flow),\n        speed: Number(msg.payload.printer.speed),\n        progress: Number(msg.payload.job.progress),\n        time_remaining: String(msg.payload.job.time_remaining),\n        time_printing: String(msg.payload.job.time_printing),\n        file_name: String(filename),\n        job_id: Number(job_id)\n        //filament_status: String(msg.payload.filament_status)\n    };\n}\n\n// Include msg.measurement outside of payload\nmsg.measurement = String(msg.measurement);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7d081b124596da9b",
        "type": "switch",
        "z": "d5c353d21ed681c9",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "b44c76fe6363ef54"
            ],
            [
                "5d15566c6f08d2f2"
            ]
        ]
    },
    {
        "id": "b44c76fe6363ef54",
        "type": "change",
        "z": "d5c353d21ed681c9",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "10653d742cbba641"
            ]
        ]
    },
    {
        "id": "5d15566c6f08d2f2",
        "type": "change",
        "z": "d5c353d21ed681c9",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "10653d742cbba641"
            ]
        ]
    },
    {
        "id": "10653d742cbba641",
        "type": "function",
        "z": "d5c353d21ed681c9",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8cabd656481a12ce",
        "type": "function",
        "z": "f36865a9b0367ee5",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9089812951b8c914",
        "type": "switch",
        "z": "271e8c6d30455066",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f922894874b9f4fc"
            ],
            [
                "722902e43c83e7f5"
            ]
        ]
    },
    {
        "id": "f922894874b9f4fc",
        "type": "change",
        "z": "271e8c6d30455066",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "2f62398aad3a4a1d"
            ]
        ]
    },
    {
        "id": "722902e43c83e7f5",
        "type": "change",
        "z": "271e8c6d30455066",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "2f62398aad3a4a1d"
            ]
        ]
    },
    {
        "id": "2f62398aad3a4a1d",
        "type": "function",
        "z": "271e8c6d30455066",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d7e347fd1dbf912a",
        "type": "function",
        "z": "f0d623925ac07e2d",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "32fe707fbf8dad54",
        "type": "switch",
        "z": "192b2bd79f1cc9d1",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "b8257e8f61c962b8"
            ],
            [
                "0c9ae76d517c8403"
            ]
        ]
    },
    {
        "id": "b8257e8f61c962b8",
        "type": "change",
        "z": "192b2bd79f1cc9d1",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "dcd322b39e0146a9"
            ]
        ]
    },
    {
        "id": "0c9ae76d517c8403",
        "type": "change",
        "z": "192b2bd79f1cc9d1",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "dcd322b39e0146a9"
            ]
        ]
    },
    {
        "id": "dcd322b39e0146a9",
        "type": "function",
        "z": "192b2bd79f1cc9d1",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e9ae7b5a484044b9",
        "type": "http request",
        "z": "f0ce8419681cf781",
        "name": "printer status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.188.61/api/v1/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "f91ecef7190937c2",
                "d5d483547d41f050"
            ]
        ]
    },
    {
        "id": "dc6d9c7a2e6c7192",
        "type": "trigger",
        "z": "f0ce8419681cf781",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "IDLE",
        "bytopic": "all",
        "topic": "payload.printerstate",
        "outputs": 1,
        "x": 460,
        "y": 380,
        "wires": [
            [
                "e9ae7b5a484044b9"
            ]
        ]
    },
    {
        "id": "3068d3edb10e0119",
        "type": "inject",
        "z": "f0ce8419681cf781",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "printertype",
                "v": "PRUSAMINI",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "RUN",
        "payloadType": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "dc6d9c7a2e6c7192",
                "3ca4c65ae9c05c15"
            ]
        ]
    },
    {
        "id": "d5d483547d41f050",
        "type": "debug",
        "z": "f0ce8419681cf781",
        "name": "mk4 telemetry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 440,
        "wires": []
    },
    {
        "id": "f91ecef7190937c2",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "Store Machine Data",
        "func": "flow.set('machine-data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 380,
        "wires": [
            [
                "aaf2b5ace20e2ac2",
                "25c17262d0c06d42",
                "803c4573a408f625"
            ]
        ]
    },
    {
        "id": "064afbc6162f15e6",
        "type": "debug",
        "z": "f0ce8419681cf781",
        "name": "Energy Per Print",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "aaf2b5ace20e2ac2",
        "type": "change",
        "z": "f0ce8419681cf781",
        "name": "get printer state",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "printerData.printer",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 440,
        "wires": [
            [
                "c23ef8cc5a9ff9ee"
            ]
        ]
    },
    {
        "id": "25c17262d0c06d42",
        "type": "change",
        "z": "f0ce8419681cf781",
        "name": "get job state",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "printerData.job",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c23ef8cc5a9ff9ee",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "structure for influx",
        "func": "msg.payload = [\n    {\n        measurement: \"machine\",   \n        fields: msg.payload,\n        tags: {\n            device: \"prusa-mk4-1\",  \n            brand: \"prusa\",\n            type: \"3dp\" \n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 440,
        "wires": [
            [
                "5c1a913771316c9f"
            ]
        ]
    },
    {
        "id": "5c1a913771316c9f",
        "type": "influxdb batch",
        "z": "f0ce8419681cf781",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB microfactory",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 1600,
        "y": 440,
        "wires": []
    },
    {
        "id": "d12e723deb17e1b7",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "structure job for influx",
        "func": "msg.payload = [\n    {\n        measurement: \"jobs\",\n        fields: msg.payload,\n        tags: {\n            device: \"prusa-mk4-1\",\n            brand: \"prusa\",\n            type: \"3dp\"\n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 340,
        "wires": [
            [
                "5c1a913771316c9f"
            ]
        ]
    },
    {
        "id": "5f3816b88de14c69",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "Calculate Energy Per Print",
        "func": "// -------------------- INPUTS FROM MSG --------------------\nlet currentEnergy = msg.energyCounter;\nlet machineState = msg.machineState;\nlet jobId = msg.jobId;\n\n// Define machine states\nlet activeState = ['WORKING','PRINTING','CUTTING'];\nlet idleStates = ['IDLE', 'FINISHED'];\n// ---------------------------------------------------------\n\nif (!flow.get('jobStarted')) flow.set('jobStarted', false);\n\nfunction generateRandomId(length) {\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\nif (activeState.includes(machineState)) {\n    if (!flow.get('jobStarted')) {\n        if (!jobId || jobId.trim() === '') {\n            jobId = generateRandomId(5);   // Assign random ID if missing/empty\n        }\n        flow.set('jobStarted', true);\n        flow.set('initialEnergy', currentEnergy);\n        flow.set('currentJobId', jobId);\n        flow.set('jobStartTime', Date.now());\n        node.warn(`Job started. JobId: ${jobId}, Initial energy: ${currentEnergy}`);\n    } else {\n        node.warn(`Job is running. Current energy: ${currentEnergy}`);\n    }\n} else if (flow.get('jobStarted') && idleStates.includes(machineState)) {\n    let initialEnergy = flow.get('initialEnergy');\n    let currentJobId = flow.get('currentJobId');\n    let energyConsumed = currentEnergy - initialEnergy;\n    let jobStartTime = flow.get('jobStartTime');\n    let jobEndTime = Date.now();\n\n    let jobResult = {\n        jobId: currentJobId,\n        energyConsumed: energyConsumed,\n        jobDuration: (jobEndTime - jobStartTime) / 1000,\n    };\n\n    flow.set('jobStarted', false);\n    flow.set('initialEnergy', null);\n    flow.set('currentJobId', null);\n    flow.set('jobStartTime', null);\n\n    node.warn(`Job completed. JobId: ${currentJobId}, Final energy: ${currentEnergy}, Energy consumed: ${energyConsumed}, Duration: ${jobResult.jobDuration} seconds`);\n    node.send({ payload: jobResult });\n} else {\n    node.warn(`No active job. Current state: ${machineState}, Current energy: ${currentEnergy}`);\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 280,
        "wires": [
            [
                "064afbc6162f15e6",
                "d12e723deb17e1b7",
                "6e7d284cb10c8866"
            ]
        ]
    },
    {
        "id": "803c4573a408f625",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "Inpu require variables",
        "func": "let required_data = {\n    energyCounter: flow.get('currentEnergy'),\n\n    // change to machine-data.API structure of used machine API\n    machineState: flow.get('machine-data').printer.state,\n    jobId: flow.get('machine-data').job.id,\n};\n\n// Option 1: send collected data in the outgoing message\nmsg = required_data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 280,
        "wires": [
            [
                "c632824ae01a5905",
                "5f3816b88de14c69"
            ]
        ]
    },
    {
        "id": "1fa3a6af2ad192d1",
        "type": "mqtt in",
        "z": "f0ce8419681cf781",
        "name": "SPPS-04 Shelly Data",
        "topic": "SPPS-04/status/switch:0",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "af889725daaa1ec0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 340,
        "y": 100,
        "wires": [
            [
                "d9f423ffd2ee923b",
                "6007edc33f1f547d",
                "7fbfa55ac31053ff"
            ]
        ]
    },
    {
        "id": "d9f423ffd2ee923b",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "structure for influx",
        "func": "msg.payload = [\n    {\n        measurement: \"sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: \"shelly\",\n            device: \" SPPS-04\",\n            type: \"electrical-energy\"\n        },\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [
            [
                "598f87188b757cb9"
            ]
        ]
    },
    {
        "id": "598f87188b757cb9",
        "type": "influxdb batch",
        "z": "f0ce8419681cf781",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB microfactory",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "7fbfa55ac31053ff",
        "type": "debug",
        "z": "f0ce8419681cf781",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 40,
        "wires": []
    },
    {
        "id": "6007edc33f1f547d",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "store current energy",
        "func": "flow.set('currentEnergy', msg.payload.aenergy.total);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c632824ae01a5905",
        "type": "debug",
        "z": "f0ce8419681cf781",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec2abdddf360baa3",
        "type": "comment",
        "z": "f0ce8419681cf781",
        "name": "adapt to machine API",
        "info": "",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "f8539a89ec961210",
        "type": "function",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Build PrusaLink G-code URL",
        "func": "// The device config was preserved in the \"Prepare Analysis Check\" node.\nconst device = msg.preserved_device_config;\n// The filename was the second parameter we set.\nconst filename = msg.params[1];\n\n// Preserve the device_id and filename for the final database update.\nmsg.device_id_for_update = msg.params[0];\nmsg.filename_for_update = msg.params[1];\n\n// PrusaLink API endpoint for downloading a file from the local SD card.\nmsg.url = `http://${device.api_ip}/api/files/local/${encodeURIComponent(filename)}`;\n\nmsg.headers = {\n    'X-Api-Key': device.api_key\n};\n\n// Clear payload for the GET request.\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 120,
        "wires": [
            [
                "6a9165f91d6f86cd"
            ]
        ]
    },
    {
        "id": "6a9165f91d6f86cd",
        "type": "http request",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "API: Download G-code",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1880,
        "y": 180,
        "wires": [
            [
                "cad1c3267f41eb3e"
            ]
        ]
    },
    {
        "id": "cad1c3267f41eb3e",
        "type": "file",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Save to /tmp/prusa_gcode.gcode",
        "filename": "/tmp/prusa_gcode.gcode",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1960,
        "y": 220,
        "wires": [
            [
                "5d27644c9f51158a"
            ]
        ]
    },
    {
        "id": "5d27644c9f51158a",
        "type": "function",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Build Prusa Analyzer Command",
        "func": "const unique_job_id = msg.device_id_for_update + '_' + msg.filename_for_update;\nconst gcodePath = \"/tmp/prusa_gcode.gcode\"; // ensure your flow writes the file here (inside the container)\nmsg.payload = `/data/scripts/gcode_analyzer.py --file \"${gcodePath}\" --jobid \"${unique_job_id}\"`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 260,
        "wires": [
            [
                "bedaf0ada87d7430"
            ]
        ]
    },
    {
        "id": "bedaf0ada87d7430",
        "type": "exec",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run G-code Analyzer",
        "x": 2040,
        "y": 300,
        "wires": [
            [
                "f502150fe2e9f17a"
            ],
            [],
            []
        ]
    },
    {
        "id": "f502150fe2e9f17a",
        "type": "json",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Parse Analyzer Output",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2100,
        "y": 340,
        "wires": [
            [
                "9340bf3669d8e55d"
            ]
        ]
    },
    {
        "id": "9340bf3669d8e55d",
        "type": "function",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Prepare Prusa Analysis for DB",
        "func": "const analysisResult = msg.payload;\n// Stop if the script failed to produce a thumbnail.\nif (!analysisResult || !analysisResult.thumbnail_url) {\n    node.warn(\"Prusa G-code analysis did not return a thumbnail. Stopping.\");\n    return null;\n}\n// Prepare data point for InfluxDB\nmsg.payload = [\n    {\n        measurement: \"gcode_analysis\",\n        tags: {\n            device_id: msg.device_id_for_update,\n            filename: msg.filename_for_update\n        },\n        fields: {\n            analysis_data: JSON.stringify(analysisResult), // raw JSON as string\n            thumbnail_url: analysisResult.thumbnail_url\n        },\n        timestamp: Date.now() * 1e6 // InfluxDB expects nanoseconds\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 380,
        "wires": [
            [
                "0806d1ca68fe780f"
            ]
        ]
    },
    {
        "id": "0806d1ca68fe780f",
        "type": "influxdb batch",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB microfactory",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 2260,
        "y": 440,
        "wires": []
    },
    {
        "id": "6e7d284cb10c8866",
        "type": "function",
        "z": "f0ce8419681cf781",
        "g": "7f301413b976a511",
        "name": "Inpu require variables",
        "func": "msg.preserved_device_config = {\n    api_ip: \"192.168.1.50\",   // Replace with your printer's IP\n    api_key: \"YOUR_API_KEY\"   // Replace with your actual API key\n};\n\n// Parameters — assuming you want [device_id, filename]\nmsg.params = [\n    \"test.gcode\"               // filename_for_update\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "f8539a89ec961210"
            ]
        ]
    },
    {
        "id": "3ca4c65ae9c05c15",
        "type": "function",
        "z": "f0ce8419681cf781",
        "name": "function 2",
        "func": "msg.payload = process.cwd();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "e08d7648fbd74eb2"
            ]
        ]
    },
    {
        "id": "e08d7648fbd74eb2",
        "type": "debug",
        "z": "f0ce8419681cf781",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "c4bc2b8ca0c16330",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Structure for Influx",
        "func": "msg.payload = [\n    {\n        measurement: \"energy_sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: \"Emon\",\n            device: \"EmonPi2\"\n        },\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "3dc660fd23e20ed6",
                "202a227ae917f3bc"
            ]
        ]
    },
    {
        "id": "3dc660fd23e20ed6",
        "type": "influxdb batch",
        "z": "f6f2187d.f17ca8",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "202a227ae917f3bc",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 180,
        "wires": []
    },
    {
        "id": "6e5a22fc3c37a5b8",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "17",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "ad3eadb35bbdb6f0"
            ]
        ]
    },
    {
        "id": "b31cd1d5bbe94338",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "emon/EmonPi2/#",
        "qos": "2",
        "datatype": "json",
        "broker": "7967f8d300e7cb63",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "6e5a22fc3c37a5b8"
            ]
        ]
    },
    {
        "id": "ad3eadb35bbdb6f0",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Extract the required parameters",
        "func": "let input = msg.payload;\n\nmsg.payload = {\n    V1 : input[\"emon/EmonPi2/V1\"],\n    P1 : input[\"emon/EmonPi2/P1\"]\n\n}\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "c4bc2b8ca0c16330"
            ]
        ]
    },
    {
        "id": "9b453aa2a66f16b1",
        "type": "mqtt in",
        "z": "e83f6f0b92151d65",
        "name": "SPPS-04 Shelly Data",
        "topic": "SPPS-04/status/switch:0",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "af889725daaa1ec0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 480,
        "y": 320,
        "wires": [
            [
                "323eb93fa2d15476",
                "ccc519922e1fc56a",
                "6237addb7fa68f99"
            ]
        ]
    },
    {
        "id": "323eb93fa2d15476",
        "type": "function",
        "z": "e83f6f0b92151d65",
        "name": "structure for influx",
        "func": "msg.payload = [\n    {\n        measurement: \"sensor\",\n        fields: msg.payload,\n        tags: {\n            brand:\"shelly\",\n            device: \" SPPS-04\",\n            type: \"electrical-energy\"\n        },\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 320,
        "wires": [
            [
                "3c1d30c986317c96"
            ]
        ]
    },
    {
        "id": "3c1d30c986317c96",
        "type": "influxdb batch",
        "z": "e83f6f0b92151d65",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "6237addb7fa68f99",
        "type": "debug",
        "z": "e83f6f0b92151d65",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 260,
        "wires": []
    },
    {
        "id": "ccc519922e1fc56a",
        "type": "function",
        "z": "e83f6f0b92151d65",
        "name": "store current energy",
        "func": "global.set('currentEnergy', msg.payload.aenergy.total);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "cc41e4392935e486",
        "type": "mqtt in",
        "z": "c970b824705576f5",
        "name": "",
        "topic": "airgradient/readings/d83bda1b0e5c",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "8488c86c5663f3ba",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "99c31db3f1a93494",
                "77c9da1bb3a844e1"
            ]
        ]
    },
    {
        "id": "99c31db3f1a93494",
        "type": "debug",
        "z": "c970b824705576f5",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "77c9da1bb3a844e1",
        "type": "function",
        "z": "c970b824705576f5",
        "name": "structure for influx",
        "func": "msg.payload = [\n    {\n        measurement: \"air-gradient\",   \n        fields: msg.payload,\n        tags: {\n            location: \"kodi-pi\" \n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "a4e0282d94754852"
            ]
        ]
    },
    {
        "id": "a4e0282d94754852",
        "type": "influxdb batch",
        "z": "c970b824705576f5",
        "influxdb": "a0bedc1d1fa7092d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB microfactory",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "b1c2d3e4f5g6h7i8",
        "type": "inject",
        "z": "ddc4b1ce3b4622c8",
        "name": "Start Model Retraining",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "retrain_model",
        "payload": "true",
        "payloadType": "bool",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "c1d2e3f4g5h6i7j8"
            ]
        ]
    },
    {
        "id": "c1d2e3f4g5h6i7j8",
        "type": "exec",
        "z": "ddc4b1ce3b4622c8",
        "command": "pwd",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "1. Run export_training_data.py",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "h1i2j3k4l5m6n7o8"
            ],
            [
                "i1j2k3l4m5n6o7p8"
            ],
            [
                "d1e2f3g4h5i6j7k8"
            ]
        ]
    },
    {
        "id": "d1e2f3g4h5i6j7k8",
        "type": "switch",
        "z": "ddc4b1ce3b4622c8",
        "name": "Check Export Success",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 240,
        "wires": [
            [
                "e1f2g3h4i5j6k7l8"
            ],
            [
                "f1g2h3i4j5k6l7m8"
            ]
        ]
    },
    {
        "id": "e1f2g3h4i5j6k7l8",
        "type": "exec",
        "z": "ddc4b1ce3b4622c8",
        "command": "python /data/backend/train_model.py",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "2. Run train_model.py",
        "x": 580,
        "y": 240,
        "wires": [
            [
                "m1n2o3p4q5r6s7t8"
            ],
            [
                "n1o2p3q4r5s6t7u8"
            ],
            [
                "j1k2l3m4n5o6p7q8"
            ]
        ]
    },
    {
        "id": "f1g2h3i4j5k6l7m8",
        "type": "change",
        "z": "ddc4b1ce3b4622c8",
        "name": "Set Failure Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Model training failed during data export. Check STDERR.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 300,
        "wires": [
            [
                "g1h2i3j4k5l6m7n8"
            ]
        ]
    },
    {
        "id": "g1h2i3j4k5l6m7n8",
        "type": "debug",
        "z": "ddc4b1ce3b4622c8",
        "name": "TRAINING STATUS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1320,
        "y": 580,
        "wires": []
    },
    {
        "id": "h1i2j3k4l5m6n7o8",
        "type": "debug",
        "z": "ddc4b1ce3b4622c8",
        "name": "Export STDOUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "i1j2k3l4m5n6o7p8",
        "type": "debug",
        "z": "ddc4b1ce3b4622c8",
        "name": "Export STDERR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 160,
        "wires": []
    },
    {
        "id": "j1k2l3m4n5o6p7q8",
        "type": "switch",
        "z": "ddc4b1ce3b4622c8",
        "name": "Check Train Success",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 300,
        "wires": [
            [
                "k1l2m3n4o5p6q7r8"
            ],
            [
                "l1m2n3o4p5q6r7s8"
            ]
        ]
    },
    {
        "id": "k1l2m3n4o5p6q7r8",
        "type": "change",
        "z": "ddc4b1ce3b4622c8",
        "name": "Set Success Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Model retraining process completed successfully!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 300,
        "wires": [
            [
                "g1h2i3j4k5l6m7n8"
            ]
        ]
    },
    {
        "id": "l1m2n3o4p5q6r7s8",
        "type": "change",
        "z": "ddc4b1ce3b4622c8",
        "name": "Set Failure Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Model training failed during model training phase. Check STDERR.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 380,
        "wires": [
            [
                "g1h2i3j4k5l6m7n8"
            ]
        ]
    },
    {
        "id": "m1n2o3p4q5r6s7t8",
        "type": "debug",
        "z": "ddc4b1ce3b4622c8",
        "name": "Train STDOUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 200,
        "wires": []
    },
    {
        "id": "n1o2p3q4r5s6t7u8",
        "type": "debug",
        "z": "ddc4b1ce3b4622c8",
        "name": "Train STDERR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 240,
        "wires": []
    },
    {
        "id": "aa85d95a6b615f4d",
        "type": "http in",
        "z": "ac9683af7e82fb53",
        "name": "GET /api/devices",
        "url": "/api/devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1980,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d2bd49b1d97f2f3a",
        "type": "http response",
        "z": "ac9683af7e82fb53",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2090,
        "y": 220,
        "wires": []
    },
    {
        "id": "3c0faef18754c38b",
        "type": "http in",
        "z": "ac9683af7e82fb53",
        "g": "d76b67f52caa79d8",
        "name": "POST /api/analyze",
        "url": "/api/analyze",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "3c629dbcef759df6"
            ]
        ],
        "info": "**Purpose:** Defines the public HTTP endpoint that the frontend page calls when a user clicks the \"Run Energy Analysis\" button.\r\n\r\n**Endpoint:** `POST /api/analyze`\r\n\r\n**Input:**\r\n- Expects an incoming `msg.payload` containing a JSON object from the frontend, e.g., `{ \"deviceId\": \"PrusaMK4-1\", \"timeRange\": \"24h\", ... }`."
    },
    {
        "id": "3c629dbcef759df6",
        "type": "function",
        "z": "ac9683af7e82fb53",
        "g": "d76b67f52caa79d8",
        "name": "Parse Analyze Request",
        "func": "// Node-RED Function Node: Parse Analyze Request (with Downsampling Logic)\n\nconst input = msg.payload;\n\n// --- Basic Validation ---\nif (!input || typeof input !== 'object') {\n    node.error(\"Invalid payload received. Expected JSON object.\", msg);\n    return [null, msg]; // Send to error output (output 2)\n}\nconst deviceId = input.deviceId;\nconst timeRange = input.timeRange || \"24h\"; // Default\nconst selectedDrivers = input.selectedDrivers || {};\n\nif (!deviceId || typeof deviceId !== 'string' || deviceId.trim() === '') {\n    node.error(\"Missing or invalid deviceId in payload.\", msg);\n    return [null, msg];\n}\n\n// --- Downsampling Logic ---\nlet bucketInterval = null; // e.g., '5 minutes', '15 minutes', etc.\nlet useDownsampling = false;\n\nswitch (timeRange) {\n    case '1h':\n    case '6h':\n        // For short ranges, use high-resolution data\n        bucketInterval = null;\n        useDownsampling = false;\n        break;\n    case '24h':\n        bucketInterval = '2 minutes';\n        useDownsampling = true;\n        break;\n    case '7d':\n        bucketInterval = '10 minutes';\n        useDownsampling = true;\n        break;\n    case 'all':\n        bucketInterval = '30 minutes';\n        useDownsampling = true;\n        break;\n    default:\n        bucketInterval = null; // Default to high-res\n        useDownsampling = false;\n}\n\nnode.log(`[Parse Request] Time Range: '${timeRange}'. Downsampling: ${useDownsampling}, Interval: ${bucketInterval}`);\n\n// --- Calculate Start Time ---\nlet startTimeISO = null;\nif (timeRange === 'all') {\n    startTimeISO = '1970-01-01T00:00:00Z';\n} else {\n    let targetTimeMs = new Date().getTime();\n    let durationHours = 0;\n    if (timeRange.endsWith('h')) {\n        durationHours = parseInt(timeRange.replace('h', ''));\n    } else if (timeRange.endsWith('d')) {\n        durationHours = parseInt(timeRange.replace('d', '')) * 24;\n    }\n    targetTimeMs -= durationHours * 60 * 60 * 1000;\n    startTimeISO = new Date(targetTimeMs).toISOString();\n}\n\n// --- Prepare variables for next steps ---\nconst allDriverDbColumns = { 'nozzle_temp_actual': 'ps.nozzle_temp_actual', 'bed_temp_actual': 'ps.bed_temp_actual', 'is_printing': 'ps.is_printing', 'z_height_mm': 'ps.z_height_mm', 'temperature_c': 'env.temperature_c', 'humidity_percent': 'env.humidity_pct' };\nlet selectedDriverKeys = Object.keys(selectedDrivers).filter(key => selectedDrivers[key] === true && allDriverDbColumns.hasOwnProperty(key));\n\n// --- Pass data to the next nodes ---\nmsg.dbParams = [deviceId, startTimeISO, bucketInterval]; // CORRECTED: Now includes bucketInterval\nmsg.useDownsampling = useDownsampling;\n\nmsg.analysisInputs = {\n    deviceId: deviceId,\n    startTime: startTimeISO,\n    selectedDriverKeys: selectedDriverKeys\n};\n\n// Clear payload from input node if not needed further\nmsg.payload = {};\n\nreturn [msg, null]; // Send valid requests to output 1 (main flow)\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 520,
        "wires": [
            [
                "8f4f788b6f9a70f6",
                "4026a26420161c57"
            ],
            [
                "877b7c14c4f7e38a",
                "d734b8886640f707"
            ]
        ],
        "info": "**Purpose:** Validates and processes the incoming request from the user. It translates the user-friendly inputs (like \"24h\") into technical parameters for the database query.\r\n\r\n**Logic:**\r\n1.  Validates the incoming JSON payload to ensure it has the required fields (`deviceId`, etc.).\r\n2.  Calculates the correct ISO 8601 start timestamp based on the `timeRange` string (e.g., \"24h\" becomes the timestamp for 24 hours ago).\r\n3.  Creates two new message properties to pass to downstream nodes:\r\n    - `msg.dbParams`: An array `[deviceId, startTimeISO]` for the PostgreSQL query.\r\n    - `msg.analysisInputs`: An object containing all the contextual information for the final Python script."
    },
    {
        "id": "d734b8886640f707",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "d76b67f52caa79d8",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 620,
        "wires": []
    },
    {
        "id": "4026a26420161c57",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "d76b67f52caa79d8",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 500,
        "wires": []
    },
    {
        "id": "7d9f73b18b360ff0",
        "type": "function",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "Prepare High-Res Params",
        "func": "// This node prepares parameters for the high-resolution query, which only uses $1 and $2.\nconst dbParams = msg.dbParams; // Should be [deviceId, startTime, null]\n\nif (!dbParams || dbParams.length < 2) {\n    node.error(\"Missing required database parameters for high-res query\", msg);\n    return null; // Stop flow\n}\n\n// Create a new array with only the first two elements.\nmsg.params = [dbParams[0], dbParams[1]];\n\n// Clean up and pass along\ndelete msg.dbParams;\nmsg.payload = {};\nmsg.topic = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 420,
        "wires": [
            [
                "e2b79e983f704ce5"
            ]
        ],
        "info": "**Purpose:** A simple \"pass-through\" node that ensures the `msg` object is correctly formatted for the main database query node.\r\n**Logic:** It moves the `msg.dbParams` created in the previous step into the `msg.params` property, which is where the `postgresql` node expects its parameters."
    },
    {
        "id": "0dce62424bc31c09",
        "type": "python-function",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "Perform Analysis (ML, Regr, Corr)",
        "func": "# Node-RED Python Function Node: Perform Analysis (MODERNIZED)\n# --- Unified Model, Dynamic Feature Handling ---\n\n# --- Imports & Environment ---\nimport sys\nimport os\n# --- Add venv path --- ) (COMMENTED IN THE DOCKER VERSION ONLY)\n#venv_path = '/home/ubuntu/monitor_ml/venv/lib/python3.12/site-packages'\n#if venv_path not in sys.path:\n#   sys.path.append(venv_path)\n#venv_path = '/home/ubuntu/monitor_ml/venv/bin'\n\nimport pandas as pd\nimport numpy as np\nimport joblib\nfrom sklearn.linear_model import LinearRegression\nimport traceback\nimport warnings\nimport gc\nimport psycopg2\n\n# --- Configuration ---\nMODEL_DIR = os.environ.get(\"MODEL_DIR\")\nTARGET_COLUMN = 'power_watts'\nACTIVE_POWER_THRESHOLD = 5.0\nIMPUTE_VALUE_WHEN_API_MISSING = 0\nDB_NAME = os.environ.get(\"POSTGRES_DB\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_PORT = os.environ.get(\"POSTGRES_PORT\")\n\n# --- Pre-load Unified Model Assets ---\ntry:\n    model = joblib.load(os.path.join(MODEL_DIR, 'best_model.joblib'))\n    scaler = joblib.load(os.path.join(MODEL_DIR, 'scaler.joblib'))\n    evaluation_metrics = joblib.load(os.path.join(MODEL_DIR, 'model_evaluation_metrics.joblib'))\n    # This is the \"contract\": the exact list of columns the model was trained on.\n    model_features_list = joblib.load(os.path.join(MODEL_DIR, 'model_features.joblib'))\n    assets_loaded = True\n    node.log(\"API - All ML assets loaded successfully.\")\nexcept Exception as e:\n    node.error(f\"API - CRITICAL: Failed to load one or more ML assets: {e}\")\n    assets_loaded = False\n    # Create a placeholder for metrics to avoid errors later\n    evaluation_metrics = {\"error\": f\"Failed to load ML assets: {e}\"}\n\n# --- Main Analysis Function Definition ---\ndef perform_analysis(data_list, selected_driver_keys, loaded_model, loaded_scaler, expected_model_features):\n    node.log(\"API - perform_analysis function started.\")\n    # Initialize results structure\n    results = {\n        \"ml_prediction\": {\"error\": None}, \"ml_feature_importance\": {\"error\": None},\n        \"ml_top_drivers\": [], \"new_metrics\": {\"error\": None},\n        \"correlation\": {}, \"regression\": {}, \"summary\": \"Analysis pending.\", \"error\": None\n    }\n\n    # --- 1. Convert input to DataFrame & Basic Prep ---\n    try:\n        if not data_list: raise ValueError(\"No data received from database query.\")\n        df = pd.DataFrame(data_list)\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        df.set_index('timestamp', inplace=True, drop=False)\n        df.sort_index(inplace=True)\n        node.log(f\"API - Initial DataFrame shape: {df.shape}\")\n    except Exception as e:\n        results[\"error\"] = f\"Data prep error: {str(e)}\"\n        node.error(f\"API - Error during DataFrame prep: {e}\\\\n{traceback.format_exc()}\")\n        return results\n\n    # --- 2. Preprocessing for ML Model (MUST MATCH train_model.py) ---\n    df_processed = None\n    try:\n        node.log(\"API - Starting ML Preprocessing...\")\n        # Create a working copy for ML-specific manipulations\n        df_ml = df.copy()\n\n        # Impute NaNs in numeric columns that are part of the base feature set\n        numeric_features_to_impute = ['plug_temp_c', 'nozzle_temp_actual', 'bed_temp_actual', 'z_height_mm', 'nozzle_temp_target', 'bed_temp_target', 'ambient_temp_c']\n        for col in numeric_features_to_impute:\n            if col in df_ml.columns:\n                df_ml[col].fillna(IMPUTE_VALUE_WHEN_API_MISSING, inplace=True)\n\n        # Clean negative z_height\n        if 'z_height_mm' in df_ml.columns:\n            df_ml.loc[df_ml['z_height_mm'] < 0, 'z_height_mm'] = 0\n\n        # --- Feature Engineering ---\n        df_ml['nozzle_temp_delta'] = df_ml['nozzle_temp_target'] - df_ml['nozzle_temp_actual']\n        df_ml['bed_temp_delta'] = df_ml['bed_temp_target'] - df_ml['bed_temp_actual']\n\n        # --- Handle Categorical 'material' ---\n        if 'material' in df_ml.columns:\n            df_ml['material'].fillna('Unknown', inplace=True)\n            material_dummies = pd.get_dummies(df_ml['material'], prefix='material', dtype=int)\n            df_ml = pd.concat([df_ml, material_dummies], axis=1)\n            df_ml.drop('material', axis=1, inplace=True)\n\n        # Process 'is_printing'\n        if 'is_printing' in df_ml.columns:\n            df_ml['is_printing'] = pd.to_numeric(df_ml['is_printing'], errors='coerce').fillna(IMPUTE_VALUE_WHEN_API_MISSING).astype(int)\n\n        # --- Reconcile columns with the \"contract\" from the trained model ---\n        # Create the final DataFrame for prediction, ensuring it has all required columns.\n        df_processed = pd.DataFrame(columns=expected_model_features, index=df_ml.index)\n        for col in expected_model_features:\n            if col in df_ml.columns:\n                df_processed[col] = df_ml[col]\n            else:\n                # If a column (e.g., a specific material type) was in training but not in this data slice, add it as all zeros.\n                df_processed[col] = 0\n        \n        # Final check for any remaining NaNs\n        df_processed.fillna(0, inplace=True)\n        node.log(f\"API - ML Preprocessing complete. Processed DF shape: {df_processed.shape}\")\n\n    except Exception as e:\n        err_msg = f\"ML Preprocessing failed: {str(e)}\"\n        results[\"ml_prediction\"][\"error\"] = err_msg\n        results[\"ml_feature_importance\"][\"error\"] = err_msg\n        node.error(f\"API - Error during ML preprocessing: {e}\\\\n{traceback.format_exc()}\")\n\n    # --- 3. ML Prediction & Feature Importance ---\n    if df_processed is not None and results[\"ml_prediction\"][\"error\"] is None:\n        try:\n            # Ensure column order matches exactly\n            X_predict = df_processed[expected_model_features]\n            \n            node.log(\"API - Scaling and predicting...\")\n            X_predict_scaled = loaded_scaler.transform(X_predict)\n            raw_predictions = loaded_model.predict(X_predict_scaled)\n\n            # Post-Processing Rule for Idle State\n            idle_mask = (X_predict['is_printing'] == 0) & (X_predict['nozzle_temp_actual'] < 30) & (X_predict['bed_temp_actual'] < 30)\n            predictions = np.where(idle_mask, 0.0, raw_predictions)\n            predictions = np.maximum(0.0, predictions) # Ensure no negative predictions\n            \n            results[\"ml_prediction\"][\"timestamps\"] = df.index.strftime('%Y-%m-%dT%H:%M:%S.%fZ').tolist()\n            results[\"ml_prediction\"][\"actual\"] = df[TARGET_COLUMN].tolist()\n            results[\"ml_prediction\"][\"predicted\"] = predictions.tolist()\n\n            # Feature Importance\n            if hasattr(loaded_model, 'feature_importances_'):\n                fi_dict = dict(zip(expected_model_features, loaded_model.feature_importances_))\n                results[\"ml_feature_importance\"] = fi_dict\n                \n                # Determine Top 3 Drivers\n                sorted_fi = sorted(fi_dict.items(), key=lambda item: item[1], reverse=True)\n                results[\"ml_top_drivers\"] = [item[0] for item in sorted_fi[:3]]\n                node.log(f\"API - Top ML Drivers: {results['ml_top_drivers']}\")\n            else:\n                results[\"ml_feature_importance\"] = {\"message\": \"Feature importance not available for this model type.\"}\n\n        except Exception as e:\n            err_msg = f\"ML Prediction failed: {str(e)}\"\n            results[\"ml_prediction\"][\"error\"] = err_msg\n            results[\"ml_feature_importance\"][\"error\"] = err_msg\n            node.error(f\"API - Error during ML prediction: {e}\\\\n{traceback.format_exc()}\")\n\n    # --- 4. New Calculations (Phase Analysis, etc.) ---\n    try:\n        node.log(\"API - Starting New Calculations (kWh, Avg Power, Phases)...\")\n        if df.empty: raise ValueError(\"Original DataFrame is empty.\")\n        \n        # --- Total Energy Calculation (This part was correct) ---\n        time_elapsed_sec = (df.index - df.index.min()).total_seconds()\n        if len(time_elapsed_sec) > 1:\n            total_joules = np.trapz(y=df[TARGET_COLUMN].fillna(0).values, x=time_elapsed_sec)\n            total_kwh = total_joules / (3600 * 1000)\n        else:\n            total_kwh = 0.0\n        \n        results[\"new_metrics\"][\"total_kwh\"] = total_kwh\n        \n        # --- Phase Definition (with REFINEMENT) ---\n        # Refinement: Add a condition that 'is_printing' must be 1 for the 'Printing' phase.\n        df['phase'] = 'Idle'\n        df.loc[df[TARGET_COLUMN] > ACTIVE_POWER_THRESHOLD, 'phase'] = 'Active (Other)'\n        if 'is_printing' in df.columns:\n            # Only classify as 'Printing' if the flag is true AND power is active.\n            df.loc[(df['is_printing'] == 1) & (df[TARGET_COLUMN] > ACTIVE_POWER_THRESHOLD), 'phase'] = 'Printing'\n\n        # Calculate overall and active averages from the main DataFrame\n        df_active = df[df['phase'] != 'Idle']\n        results[\"new_metrics\"][\"avg_power_overall\"] = df[TARGET_COLUMN].mean()\n        results[\"new_metrics\"][\"avg_power_active\"] = df_active[TARGET_COLUMN].mean() if not df_active.empty else 0.0\n\n        # --- Phase Analysis Calculation (with CRITICAL FIX) ---\n        phase_analysis = {}\n        time_diff_sec = df.index.to_series().diff().dt.total_seconds().fillna(0)\n        total_duration_sec = time_diff_sec.sum()\n        \n        for phase_name, phase_df in df.groupby('phase'):\n            if phase_df.empty: continue\n\n            phase_duration_sec = time_diff_sec[phase_df.index].sum()\n            \n            # CRITICAL FIX: The time axis for integration must be continuous for each phase.\n            # We calculate energy by summing up (power * time_delta) for each point in the phase.\n            phase_time_deltas_sec = time_diff_sec[phase_df.index]\n            phase_power_watts = phase_df[TARGET_COLUMN].fillna(0)\n            phase_joules = np.sum(phase_power_watts * phase_time_deltas_sec)\n            phase_kwh = phase_joules / (3600 * 1000)\n            \n            phase_analysis[phase_name] = {\n                \"duration_minutes\": phase_duration_sec / 60,\n                \"duration_percent\": (phase_duration_sec / total_duration_sec * 100) if total_duration_sec > 0 else 0,\n                \"energy_kwh\": phase_kwh,\n                \"energy_percent\": (phase_kwh / total_kwh * 100) if total_kwh > 0 else 0,\n                \"avg_power\": phase_df[TARGET_COLUMN].mean() if not phase_df.empty else 0\n            }\n        results[\"new_metrics\"][\"phase_analysis\"] = phase_analysis\n\n    except Exception as e:\n        results[\"new_metrics\"][\"error\"] = f\"Failed: {str(e)}\"\n        node.error(f\"API - Error during new calculations: {e}\\\\n{traceback.format_exc()}\")\n\n        \n    # --- 5 & 6. Correlation & Regression (On user-selected drivers) ---\n    # (This section also works on `df_active` and does not need major changes)\n    if 'df_active' in locals() and not df_active.empty:\n        try:\n            # Correlation\n            valid_drivers = [key for key in selected_driver_keys if key in df_active.columns and pd.api.types.is_numeric_dtype(df_active[key])]\n            if valid_drivers:\n                corr_df = df_active[[TARGET_COLUMN] + valid_drivers].dropna()\n                if len(corr_df) > 1:\n                    results[\"correlation\"] = corr_df.corr()[TARGET_COLUMN].drop(TARGET_COLUMN).to_dict()\n            \n            # Regression\n            if valid_drivers and len(corr_df) >= len(valid_drivers) + 2:\n                X_regr = corr_df[valid_drivers]\n                y_regr = corr_df[TARGET_COLUMN]\n                regr_model = LinearRegression().fit(X_regr, y_regr)\n                results[\"regression\"] = {\n                    \"drivers\": valid_drivers, \"coefficients\": dict(zip(valid_drivers, regr_model.coef_)),\n                    \"intercept\": regr_model.intercept_, \"r_squared\": regr_model.score(X_regr, y_regr),\n                    \"n_samples\": len(corr_df)\n                }\n        except Exception as e:\n            results[\"correlation\"][\"error\"] = str(e)\n            results[\"regression\"][\"error\"] = str(e)\n            node.error(f\"API - Error during Corr/Regr: {e}\\\\n{traceback.format_exc()}\")\n    else:\n        results[\"correlation\"][\"message\"] = \"No active data for correlation.\"\n        results[\"regression\"][\"message\"] = \"No active data for regression.\"\n\n    # --- 7. Final Summary ---\n    results[\"summary\"] = f\"Analysis complete for {len(df)} data points.\"\n    return results\n\n# === Main Execution Block ===\nif not assets_loaded:\n    final_response_results = {\"summary\": \"Analysis failed: Critical model components could not be loaded.\", \"error\": evaluation_metrics[\"error\"]}\nelse:\n    # Get inputs from Node-RED message\n    input_data = msg.get('payload', [])\n    selected_keys = msg.get('analysisInputs', {}).get('selectedDriverKeys', [])\n    \n    # Run the main analysis function\n    analysis_results = perform_analysis(input_data, selected_keys, model, scaler, model_features_list)\n    \n    # Add evaluation metrics to the final response\n    analysis_results[\"ml_evaluation_metrics\"] = evaluation_metrics\n    \n    # Convert numpy types to standard Python types for JSON compatibility\n    def convert_numpy_types(obj):\n        if isinstance(obj, dict): return {k: convert_numpy_types(v) for k, v in obj.items()}\n        if isinstance(obj, list): return [convert_numpy_types(i) for i in obj]\n        if isinstance(obj, (np.integer, np.int64)): return int(obj)\n        if isinstance(obj, (np.floating, np.float64)): return float(obj) if not np.isnan(obj) else None\n        if pd.isna(obj): return None\n        return obj\n    \n    final_response_results = convert_numpy_types(analysis_results)\n\nmsg['payload'] = final_response_results\nreturn msg",
        "outputs": 1,
        "x": 1480,
        "y": 300,
        "wires": [
            [
                "637a8110bd1b6c3d",
                "baa83abab59cfda0"
            ]
        ],
        "info": "**Purpose:** The main \"brain\" of the analysis. It takes the large dataset from the database and performs all the statistical and machine learning calculations requested by the user.\r\n\r\n**Logic:**\r\n1.  **Prediction:** Runs the pre-trained ML model over the entire dataset to generate \"Predicted vs. Actual\" power values.\r\n2.  **Metrics Calculation:** Computes key metrics like Total kWh, Average Power, and performs a detailed phase analysis (time/energy spent Printing vs. Idle vs. Active).\r\n3.  **Statistical Analysis:** Calculates the correlation and a simple linear regression between the user-selected \"drivers\" (e.g., nozzle temperature) and the power consumption.\r\n4.  **Feature Importance:** Extracts the feature importances from the ML model to identify the top three most influential factors.\r\n\r\n**Outputs:**\r\n- **Output 1 (`msg.payload`):** A large JSON object containing all the calculated results, ready to be sent to the frontend.\r\n- **Output 2 (`msg.predictions`):** An array of all the predictions made, which is sent to a separate branch to be saved in the database."
    },
    {
        "id": "baa83abab59cfda0",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1700,
        "y": 220,
        "wires": []
    },
    {
        "id": "37a1301db44207e7",
        "type": "function",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "Prepare Downsample Params",
        "func": "// This node prepares parameters for the downsampling query, which uses all three: $1, $2, and $3.\nconst dbParams = msg.dbParams; // Should be [deviceId, startTime, bucketInterval]\n\nif (!dbParams || dbParams.length < 3 || !dbParams[2]) {\n    node.error(\"Missing required database parameters for downsampling query\", msg);\n    return null; // Stop flow\n}\n\n// The full dbParams array is what we need.\nmsg.params = dbParams;\n\n// Clean up and pass along\ndelete msg.dbParams;\nmsg.payload = {};\nmsg.topic = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "e037662c792c8b69"
            ]
        ],
        "info": "**Purpose:** A simple \"pass-through\" node that ensures the `msg` object is correctly formatted for the main database query node.\r\n**Logic:** It moves the `msg.dbParams` created in the previous step into the `msg.params` property, which is where the `postgresql` node expects its parameters."
    },
    {
        "id": "8f4f788b6f9a70f6",
        "type": "switch",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "Route by Downsampling",
        "property": "useDownsampling",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 340,
        "wires": [
            [
                "65d041650de3e522",
                "37a1301db44207e7"
            ],
            [
                "7d9f73b18b360ff0",
                "32c2bbb9b7e94930"
            ]
        ]
    },
    {
        "id": "e037662c792c8b69",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1270,
        "y": 180,
        "wires": []
    },
    {
        "id": "e2b79e983f704ce5",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "32c2bbb9b7e94930",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "65d041650de3e522",
        "type": "debug",
        "z": "ac9683af7e82fb53",
        "g": "98098bf0a6ab5a91",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 460,
        "y": 240,
        "wires": []
    },
    {
        "id": "637a8110bd1b6c3d",
        "type": "function",
        "z": "ac9683af7e82fb53",
        "g": "ffc9bf786a9053df",
        "name": "Prepare Batched Params for UNNEST",
        "func": "// msg.payload = main analysis results\n// msg.predictions = full array of prediction objects {ts, dev_id, pred_pwr, model_ver}\n\nconst predictions = msg.predictions;\nconst batchSize = 100; // Process in chunks within this function\nlet allParams = []; // Array to hold all parameters for potentially multiple DB calls\n\nif (!Array.isArray(predictions) || predictions.length === 0) {\n    node.warn(\"No predictions array found or empty, skipping insert preparation.\");\n    // Send the original payload along the main path, but stop this insert path\n    // To do this, we need two outputs from this function node.\n    // Output 1: Main payload (passthrough)\n    // Output 2: Database parameters (or null if no predictions)\n    return [msg, null]; // Send original msg out output 1, null out output 2\n}\n\nnode.log(`Preparing ${predictions.length} predictions for batched UNNEST insert...`);\n\nlet currentBatchParams = {\n    timestamps: [],\n    device_ids: [],\n    predicted_watts: [],\n    model_versions: []\n};\nlet batchCount = 0;\n\nfor (const pred of predictions) {\n    // Basic validation for each object\n    if (pred && pred.timestamp && pred.device_id && typeof pred.predicted_power_watts === 'number' && !isNaN(pred.predicted_power_watts) && pred.model_version) {\n        currentBatchParams.timestamps.push(pred.timestamp);\n        currentBatchParams.device_ids.push(pred.device_id);\n        currentBatchParams.predicted_watts.push(pred.predicted_power_watts);\n        currentBatchParams.model_versions.push(pred.model_version);\n        batchCount++;\n\n        // If batch size reached, prepare parameters for this batch\n        if (batchCount >= batchSize) {\n            // Create parameters array FOR ONE DB CALL for this batch\n            allParams.push({\n                params: [\n                    currentBatchParams.timestamps,\n                    currentBatchParams.device_ids,\n                    currentBatchParams.predicted_watts,\n                    currentBatchParams.model_versions\n                ],\n                // Include _msgid context if needed for debugging, but params is key\n                 _msgid_batch_start: msg._msgid + \"_batch_\" + (allParams.length * batchSize)\n            });\n            // Reset for next batch\n            currentBatchParams = { timestamps: [], device_ids: [], predicted_watts: [], model_versions: [] };\n            batchCount = 0;\n        }\n    } else {\n         node.warn(`Skipping invalid prediction object in batch: ${JSON.stringify(pred)}`);\n    }\n}\n\n// Add any remaining predictions in the last partial batch\nif (batchCount > 0) {\n     allParams.push({\n         params: [\n             currentBatchParams.timestamps,\n             currentBatchParams.device_ids,\n             currentBatchParams.predicted_watts,\n             currentBatchParams.model_versions\n         ],\n          _msgid_batch_start: msg._msgid + \"_batch_\" + (allParams.length * batchSize)\n     });\n}\n\nnode.log(`Prepared ${allParams.length} batches for insert.`);\n\n// --- IMPORTANT ---\n// Keep the original msg.payload for the main response path (Output 1)\n// Create a *new* message object containing the array of parameter batches for the DB path (Output 2)\nlet dbMsg = {\n    payload: allParams, // Array of {params: [...]} objects\n     _msgid: msg._msgid // Can reuse original msgid for this branch\n};\n\n// Output 1: Original message (minus predictions) for the HTTP response path\n// Output 2: New message with batched parameters for the DB insert path\ndelete msg.predictions; // Clean original message\nreturn [ msg, dbMsg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 300,
        "wires": [
            [
                "5e31f106a013a9ed"
            ],
            [
                "1f4c324b592f4ed2"
            ]
        ],
        "info": "**Purpose:** Prepares the large array of predictions from the Python script for efficient insertion into the database.\r\n**Logic:** It transforms the array of prediction objects into four separate arrays (timestamps, device_ids, predicted_watts, model_versions), which is the format required for PostgreSQL's efficient `UNNEST` function. It also splits the data into batches to avoid sending a single massive query."
    },
    {
        "id": "1f4c324b592f4ed2",
        "type": "split",
        "z": "ac9683af7e82fb53",
        "g": "ffc9bf786a9053df",
        "name": "Split Parameter Batches",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2170,
        "y": 360,
        "wires": [
            [
                "64ef9337f1633831"
            ]
        ]
    },
    {
        "id": "64ef9337f1633831",
        "type": "change",
        "z": "ac9683af7e82fb53",
        "g": "ffc9bf786a9053df",
        "name": "Set Batch Params",
        "rules": [
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "payload.params",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5e31f106a013a9ed",
        "type": "function",
        "z": "ac9683af7e82fb53",
        "g": "ffc9bf786a9053df",
        "name": "Format API Response",
        "func": "// Node-RED Function Node: Format API Response\n// --- Updated: 2024-07-XX (Handle 'all' time range for Grafana, include new metrics/drivers) ---\n\n// --- Add this log at the START ---\nnode.log(`Format Response - Received msg.payload type: ${typeof msg.payload}`);\nif (typeof msg.payload === 'object' && msg.payload !== null) {\n    node.log(`Format Response - Received payload keys: ${Object.keys(msg.payload)}`);\n    const receivedMetrics = msg.payload.new_metrics;\n    node.log(`Format Response - Received new_metrics type: ${typeof receivedMetrics}`);\n    // Limit stringify length for potentially large phase data\n    // node.log(`Format Response - Received new_metrics content: ${JSON.stringify(receivedMetrics)?.substring(0, 500)}...`);\n}\n// --- End Log ---\n\n// msg.payload contains the analysis results from Python node\n// msg.analysisInputs contains deviceId, startTime, selectedDriverKeys\nconst results = msg.payload; // These are the results calculated by Python\nconst analysisInputs = msg.analysisInputs; // These are the original inputs to the analysis\n\n// Initialize default payload for error cases or missing inputs\nlet responsePayload = { success: false, error: \"Unknown error occurred before formatting.\" };\nmsg.statusCode = 500; // Default to Internal Server Error\n\n// Check if analysis seems to have run and required inputs are available\nconst deviceId = analysisInputs?.deviceId;\nconst startTime = analysisInputs?.startTime; // Can be ISO string or '1970-01-01T00:00:00Z'\n\nif (results && typeof results === 'object' && !results.error && deviceId && startTime) {\n    // Proceed if Python didn't return a top-level error and we have device/start info\n    try {\n        node.log(`Format Response: Formatting for device: ${deviceId}, startTime marker: ${startTime}`);\n\n        // --- Generate Grafana Panel URLs ---\n        const grafanaBaseUrl = \"https://lauds.intel50001.com\"; // Your Grafana public URL\n        const dashboardUID = \"dej62anu0b3swf\";             // Your Dashboard UID\n        const dashboardName = \"prusa\";                     // Your Dashboard Name/Slug\n\n        // --- Determine Correct Panel ID ---\n        let panel1Id = \"1\"; // Default Panel ID for Actual vs Predicted\n        if (deviceId === 'PrusaMK4-1') {\n            panel1Id = \"3\";\n            node.log(`Format Response: Using Panel ID ${panel1Id} for PrusaMK4-1`);\n        } else {\n            node.log(`Format Response: Using default Panel ID ${panel1Id} for ${deviceId}`);\n        }\n\n        // --- Determine Grafana 'from' timestamp ---\n        let fromMs = null; // Use null to indicate invalid/missing time\n        const toMs = new Date().getTime(); // Use current time for 'to'\n\n        // Get the minimum timestamp fetched by Python (might be null)\n        const minTimestampIso = results?.device_info?.min_timestamp_iso; // Use optional chaining\n\n        if (startTime) { // Check if startTime marker exists\n            if (startTime === '1970-01-01T00:00:00Z') {\n                // Handle the 'all time' marker\n                if (minTimestampIso) { // If we successfully fetched the actual min timestamp\n                    const minDate = new Date(minTimestampIso);\n                    if (!isNaN(minDate)) {\n                        fromMs = minDate.getTime();\n                        node.log(`Format Response: 'All Time' range - using actual min_timestamp, fromMs: ${fromMs}`);\n                    } else {\n                        node.warn(`Format Response: Could not parse min_timestamp_iso: ${minTimestampIso}. Defaulting 'from' to epoch.`);\n                        fromMs = 0; // Fallback to epoch if min ts parsing fails\n                    }\n                } else {\n                    // Fallback if min_timestamp couldn't be fetched (e.g., no data for device)\n                    node.warn(\"Format Response: 'All Time' range - min_timestamp not available. Defaulting 'from' to epoch.\");\n                    fromMs = 0; // Default to epoch start if no actual min timestamp found\n                }\n            } else {\n                // Handle specific time ranges (1h, 6h, etc.)\n                const startDate = new Date(startTime);\n                if (!isNaN(startDate)) {\n                    fromMs = startDate.getTime();\n                    // node.log(`Format Response: Specific startTime parsed: ${startTime}, fromMs: ${fromMs}`); // Optional log\n                } else {\n                    node.error(`Format Response: Invalid non-'all' startTime format: ${startTime}.`);\n                    // fromMs remains null\n                }\n            }\n        } else {\n            // startTime itself was missing\n            node.error(`Format Response: Missing startTime in analysisInputs.`);\n            // fromMs remains null\n        }\n    // --- END Determine Grafana 'from' timestamp ---\n\n    // --- Construct URLs ONLY if fromMs is valid (not null) ---\n\n        let urlPanel1 = null;\n        if (fromMs !== null) {\n            urlPanel1 = `${grafanaBaseUrl}/d-solo/${dashboardUID}/${dashboardName}?orgId=1&theme=light&panelId=${panel1Id}&from=${fromMs}&to=${toMs}&var-deviceId=${encodeURIComponent(deviceId)}`;\n            node.log(`Format Response: Generated Panel 1 URL: ${urlPanel1}`);\n        } else {\n            node.log(\"Format Response: Skipping Grafana URL generation due to invalid 'from' time.\");\n        }\n\n        // --- Prepare final success payload ---\n        // Ensure ALL expected keys from the Python output (results) are included here\n        responsePayload = {\n            success: true,\n            error: null, // No top-level error from Python node\n            results: {\n                summary: results.summary || \"Summary unavailable.\",\n                new_metrics: results.new_metrics || { \"error\": \"Metrics missing from backend\" }, // Include new metrics\n                correlation: results.correlation || {},\n                regression: results.regression || {},\n                ml_prediction_summary: results.ml_prediction_summary || \"Prediction status unknown.\",\n                ml_evaluation_metrics: results.ml_evaluation_metrics || { status: \"Metrics could not be loaded.\" }, // Use correct key\n                ml_feature_importance: results.ml_feature_importance || {},\n                ml_top_drivers: results.ml_top_drivers || [], // Include top drivers\n                grafanaUrls: {\n                    panel1: urlPanel1 // Pass the potentially null URL\n                    // panel2: urlPanel2 // Add panel 2 URL here if used\n                }\n            }\n        };\n        msg.statusCode = 200; // OK\n\n    } catch (e) {\n        // Catch errors during the formatting process itself\n        node.error(`Format Response: Error during formatting: ${e}\\n${e.stack}`, msg);\n        responsePayload = { success: false, error: `Internal formatting error: ${e.message}` };\n        msg.statusCode = 500;\n    }\n\n} else {\n    // Handle cases where Python node failed or required inputs were missing before formatting\n    let errorReason = results?.error || \"Analysis failed or inputs missing.\";\n    if (!deviceId) errorReason += \" Missing deviceId.\";\n    if (!startTime) errorReason += \" Missing startTime.\";\n    node.error(`Format Response: Pre-check failed. Reason: ${errorReason}`, msg);\n    responsePayload = { success: false, error: errorReason }; // Use more specific error\n    // msg.statusCode remains 500 (default)\n}\n\n// Set the final payload to be sent back to the UI\nmsg.payload = responsePayload;\n\n// Clean up intermediate properties from the message object\ndelete msg.analysisInputs;\ndelete msg.predictions;\ndelete msg.topic;\ndelete msg.params;\n// delete msg.dbParams; // Usually safe to delete\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 400,
        "wires": [
            [
                "877b7c14c4f7e38a"
            ]
        ],
        "info": "**Purpose:** The final step before sending the data back to the user. It formats the raw results from the Python script into the final, clean JSON structure that the `analysis_page.html` frontend expects.\r\n**Logic:** It builds the final response object, including the summary text, metrics, correlation results, and dynamically generated Grafana URLs."
    },
    {
        "id": "877b7c14c4f7e38a",
        "type": "http response",
        "z": "ac9683af7e82fb53",
        "g": "ffc9bf786a9053df",
        "name": "Send API Response",
        "statusCode": "",
        "headers": {},
        "x": 2800,
        "y": 520,
        "wires": [],
        "info": "**Purpose:** Sends the final, formatted JSON response back to the `analysis_page.html` frontend.\r\n**Logic:** Sets the HTTP status code to `200 OK` and sends the `msg.payload`."
    },
    {
        "id": "354f2172e6e03a53",
        "type": "inject",
        "z": "3248d6a231f4e9d0",
        "name": "Trigger Every 10s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "159ff313dfdb5268",
        "type": "split",
        "z": "3248d6a231f4e9d0",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "59d5c97a1175bc77",
                "b5e9a4ec15d1f0e4"
            ]
        ]
    },
    {
        "id": "ed8d401b15516e70",
        "type": "function",
        "z": "3248d6a231f4e9d0",
        "name": "Prepare Features",
        "func": "const latestData = msg.payload;\nconst deviceId = latestData.device_id;\n\nif (!latestData || typeof latestData !== 'object' || !deviceId) {\n    node.warn(\"Received invalid data after split. Skipping.\");\n    return null;\n}\n\n// This part is the same, gathering only the features for the model\nlet features = {\n    'plug_temp_c': latestData.plug_temp_c,\n    'nozzle_temp_actual': latestData.nozzle_temp_actual,\n    'bed_temp_actual': latestData.bed_temp_actual,\n    'nozzle_temp_target': latestData.nozzle_temp_target,\n    'bed_temp_target': latestData.bed_temp_target,\n    'is_printing': latestData.is_printing,\n    'z_height_mm': latestData.z_height_mm,\n    'material': latestData.material,\n    'ambient_temp_c': latestData.ambient_temp_c\n};\n\n// --- THIS IS THE FIX ---\n// Instead of splitting the data, we create a single payload object\n// that matches exactly what the Python script expects to receive.\nmsg.payload = {\n    payload: features, // The nested features object\n    device_id: deviceId  // The device_id at the top level\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6fd5883ace8ba719",
                "9f51ad9219ed3508"
            ]
        ]
    },
    {
        "id": "519c98b988f258d5",
        "type": "change",
        "z": "3248d6a231f4e9d0",
        "name": "Restructure Msg",
        "rules": [
            {
                "t": "set",
                "p": "device_id",
                "pt": "msg",
                "to": "payload.device_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "9e18ef0c306e1204"
            ]
        ]
    },
    {
        "id": "9e18ef0c306e1204",
        "type": "function",
        "z": "3248d6a231f4e9d0",
        "name": "Prepare Prediction Insert",
        "func": "const predictionResult = msg.payload;\nconst deviceId = msg.device_id;\nconst predictionValue = predictionResult?.predicted_power_watts;\nconst model_version = 'RandomForest_Worker'; // New model name\nconst timestamp = new Date().toISOString();\n\nif (!deviceId || typeof predictionValue !== 'number' || isNaN(predictionValue)) {\n    node.error(`Invalid data for insert. Device: ${deviceId}, Prediction: ${predictionValue}`, msg);\n    return null;\n}\n\nmsg.params = [\n    timestamp,\n    deviceId,\n    predictionValue,\n    model_version\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 380,
        "wires": [
            [
                "90abe6a123b31d86"
            ]
        ]
    },
    {
        "id": "b5e9a4ec15d1f0e4",
        "type": "debug",
        "z": "3248d6a231f4e9d0",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "9f51ad9219ed3508",
        "type": "debug",
        "z": "3248d6a231f4e9d0",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 720,
        "y": 340,
        "wires": []
    },
    {
        "id": "59d5c97a1175bc77",
        "type": "delay",
        "z": "3248d6a231f4e9d0",
        "name": "",
        "pauseType": "rate",
        "timeout": "580",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "ed8d401b15516e70"
            ]
        ]
    },
    {
        "id": "90abe6a123b31d86",
        "type": "debug",
        "z": "3248d6a231f4e9d0",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 320,
        "wires": []
    },
    {
        "id": "6fd5883ace8ba719",
        "type": "mqtt out",
        "z": "3248d6a231f4e9d0",
        "name": "",
        "topic": "predictions/request",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2f7664b28c919cfe",
        "x": 310,
        "y": 360,
        "wires": []
    },
    {
        "id": "427458e2bf9c1e4e",
        "type": "mqtt in",
        "z": "3248d6a231f4e9d0",
        "name": "",
        "topic": "predictions/result",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2f7664b28c919cfe",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 380,
        "wires": [
            [
                "519c98b988f258d5"
            ]
        ]
    },
    {
        "id": "02ea663491d7ef4b",
        "type": "inject",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Poll All Printers Every 30s",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 180,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3bf69c618d3771ca",
        "type": "split",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "For Each Device",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "f3858a8857ffde13"
            ]
        ]
    },
    {
        "id": "b27da203e5c23ee9",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare SimplyPrint Request",
        "func": "const device = msg.payload;\n// Save the full config for later enrichment steps\nmsg.original_device_config = device; \n\nmsg.method = \"POST\";\nmsg.headers = {\n    'X-API-KEY': device.sp_api_key, // Use the key from this specific device's row\n    'Content-Type': 'application/json'\n};\nmsg.url = `https://api.simplyprint.io/${device.sp_company_id}/printers/Get`;\nmsg.payload = { \"pid\": parseInt(device.simplyprint_id, 10) };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "ea15470d20a551d0",
                "b9a4c25e40aeeef0"
            ]
        ]
    },
    {
        "id": "f4ec324598c62401",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare PrusaLink Request",
        "func": "const device = msg.payload;\n\n// Save the full device config so we can use it again in the next step\nmsg.original_device_config = device;\n\n// Prepare the FIRST API call to the /printer endpoint\nmsg.url = `http://${device.api_ip}/api/printer`;\nmsg.headers = { 'X-Api-Key': device.api_key };\nmsg.payload = {}; // This is a GET request, so payload is empty\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 240,
        "wires": [
            [
                "2ad6a970bba49d5f",
                "e4a60772850676ff"
            ]
        ]
    },
    {
        "id": "ea15470d20a551d0",
        "type": "http request",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call SimplyPrint API",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "5dda7fb58e2cb2a2",
                "d43ff076a1a9a7bf"
            ]
        ]
    },
    {
        "id": "2ad6a970bba49d5f",
        "type": "http request",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call Prusa /printer API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1080,
        "y": 240,
        "wires": [
            [
                "153a9432435bf76b",
                "574260bbc0dc2b2f"
            ]
        ]
    },
    {
        "id": "153a9432435bf76b",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare Prusa /job Request",
        "func": "// Store the response from the first API call (/printer)\nmsg.printer_api_response = msg.payload;\n\n// Retrieve the saved device config from the first step\nconst device = msg.original_device_config;\n\n// Prepare the SECOND API call to the /job endpoint\nmsg.url = `http://${device.api_ip}/api/job`;\n\n// Re-apply the authentication headers for this second request\nmsg.headers = { 'X-Api-Key': device.api_key };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 360,
        "wires": [
            [
                "23ca3a3983ca05ef",
                "7633245e76a0f219"
            ]
        ]
    },
    {
        "id": "23ca3a3983ca05ef",
        "type": "http request",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call Prusa /job API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1510,
        "y": 500,
        "wires": [
            [
                "bfb231c8765823a8",
                "18c9e99643ee6bcd"
            ]
        ]
    },
    {
        "id": "bfb231c8765823a8",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Parse PrusaLink Data",
        "func": "// --- Get data from previous nodes ---\nconst printer_response = msg.printer_api_response;\nconst job_response = msg.payload;\nconst device = msg.original_device_config;\nconst last_status = flow.get('printer_status_' + device.device_id) || {};\n\n// --- Safety Check ---\nif (!printer_response || !printer_response.state) {\n    node.warn(`No valid /printer response for ${device.friendly_name}. Skipping.`);\n    return null;\n}\n\n// --- Parse Current and Previous States ---\nconst stateFlags = printer_response.state?.flags ?? {};\nconst is_printing_now = stateFlags.printing ?? false;\nconst was_printing = last_status.is_printing ?? false;\nconst current_filename = job_response?.job?.file?.name ?? null;\n\n// --- NEW: Smart Job Creation/Update Logic ---\n// This logic handles the creation of new jobs for reprints.\nif (is_printing_now && !was_printing && current_filename) {\n    // This is a \"Job Start\" event. A print has just begun.\n    // We will create a NEW job record every time this happens.\n    const new_job_msg = {\n        topic: \"CREATE_NEW_PRUSA_JOB\",\n        query: `\n            INSERT INTO print_jobs (device_id, filename, status, start_time)\n            VALUES ($1, $2, 'printing', NOW());\n        `,\n        params: [device.device_id, current_filename]\n    };\n    // Use node.send to fire this off as a separate action.\n    // The main flow will continue in parallel.\n    node.send([null, null, new_job_msg]); // Sending to a NEW 3rd output\n}\n// --- END of NEW Logic ---\n\n// --- Store the current status in memory for the next cycle ---\nflow.set('printer_status_' + device.device_id, {\n    is_printing: is_printing_now,\n    filename: current_filename,\n    device_id: device.device_id\n});\n\n// --- Job Completion Detection (Existing Logic) ---\nif (was_printing && !is_printing_now) {\n    const end_of_job_msg = {\n        topic: \"CALCULATE_FINAL_ENERGY\",\n        params: [last_status.device_id, last_status.filename]\n    };\n    \n    // --- NEW: Add logic to update the job status to 'done' ---\n    const update_job_status_msg = {\n        topic: \"UPDATE_PRUSA_JOB_STATUS\",\n        query: `\n            UPDATE print_jobs \n            SET status = 'done', end_time = NOW(), duration_seconds = EXTRACT(EPOCH FROM (NOW() - start_time))\n            WHERE device_id = $1 AND filename = $2 AND status = 'printing';\n        `,\n        params: [last_status.device_id, last_status.filename]\n    };\n    node.send([null, end_of_job_msg, update_job_status_msg]); // Send to outputs 2 and 3\n}\n\n// --- Prepare the original status insert message for Output 1 ---\n// --- Prepare the main status insert message for Output 1 ---\nconst params = [\n    new Date().toISOString(), // 1\n    device.device_id, // 2\n    printer_response.state?.text ?? 'Unknown', // 3\n    stateFlags.operational ?? false, // 4\n    is_printing_now, // 5\n    stateFlags.paused ?? false, // 6\n    stateFlags.error ?? false, // 7\n    stateFlags.busy ?? false, // 8\n    printer_response.temperature?.tool0?.actual ?? null, // 9\n    printer_response.temperature?.tool0?.target ?? null, // 10\n    printer_response.temperature?.bed?.actual ?? null, // 11\n    printer_response.temperature?.bed?.target ?? null, // 12\n    printer_response.telemetry?.material ?? null, // 13\n    current_filename, // 14\n    (job_response?.progress?.completion ?? 0) * 100, // 15\n    job_response?.progress?.printTimeLeft ?? null, // 16\n    // --- THIS IS THE FIX ---\n    // Add a null placeholder for ambient_temp_c, which PrusaLink does not provide.\n    null // 17\n];\nmsg.params = params;",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 640,
        "wires": [
            [
                "76faa27c3f22fa95",
                "cda295997d384d1b",
                "3bc77aad3c1f970d"
            ],
            [
                "81d3cb6157d204a7",
                "853372a55c401c65"
            ],
            [
                "1a68329a7809840d"
            ]
        ]
    },
    {
        "id": "f297e1970a6e9404",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Route by Data Source Strategy",
        "func": "const device = msg.payload;\n\n// If it has an api_ip, it's a PrusaLink device.\nif (device.api_ip && device.api_ip !== '') {\n    // Send to Output 1\n    return [msg, null];\n}\n// Otherwise, if it has a simplyprint_id, it's a SimplyPrint device.\nelse if (device.simplyprint_id) {\n    // Send to Output 2\n    return [null, msg];\n}\n// Ignore devices that don't match.\nreturn null;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 440,
        "wires": [
            [
                "f4ec324598c62401",
                "d72cfa8a09b4ac1a"
            ],
            [
                "9745ef2b3e3aa7e2",
                "b27da203e5c23ee9"
            ]
        ]
    },
    {
        "id": "76faa27c3f22fa95",
        "type": "link out",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Send Prusa Data to DB",
        "mode": "link",
        "links": [
            "af2f0b8c71e0ef6c"
        ],
        "x": 2590,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "5dda7fb58e2cb2a2",
        "type": "link out",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call Job Detail Subflow",
        "mode": "link",
        "links": [
            "31749266865874cf"
        ],
        "x": 710,
        "y": 720,
        "wires": [],
        "l": true
    },
    {
        "id": "bf152e33e1198b2b",
        "type": "link in",
        "z": "c4582a5c3c4d6d09",
        "g": "5f3f1baac114fb7c",
        "name": "Receive Job Upsert Data",
        "links": [
            "566c89287199eab1"
        ],
        "x": 2930,
        "y": 340,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "af2f0b8c71e0ef6c",
        "type": "link in",
        "z": "c4582a5c3c4d6d09",
        "g": "5f3f1baac114fb7c",
        "name": "Receive Status Insert Data",
        "links": [
            "76faa27c3f22fa95",
            "d980d78960bfd999"
        ],
        "x": 2910,
        "y": 200,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "9745ef2b3e3aa7e2",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Output 2: Route by Data Source Strategy",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "e4a60772850676ff",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare PrusaLink Request output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "574260bbc0dc2b2f",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call Prusa /printer API output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 240,
        "wires": []
    },
    {
        "id": "7633245e76a0f219",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare Prusa /job Request",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 320,
        "wires": []
    },
    {
        "id": "18c9e99643ee6bcd",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call Prusa /job API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 460,
        "wires": []
    },
    {
        "id": "3bc77aad3c1f970d",
        "type": "switch",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Is Prusa Printing?",
        "property": "params[4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2410,
        "y": 640,
        "wires": [
            [
                "38850782ee90eabb",
                "075caf0daf376cc6",
                "95202ab5fa233a47"
            ]
        ]
    },
    {
        "id": "38850782ee90eabb",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Set Params for Energy Subflow",
        "func": "// msg.params[1] is device_id, msg.params[13] is filename\nmsg.params = [msg.params[1], msg.params[13]];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 560,
        "wires": [
            [
                "6f5a6bdde6455ef0"
            ]
        ]
    },
    {
        "id": "6f5a6bdde6455ef0",
        "type": "link out",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "link out 1",
        "mode": "link",
        "links": [],
        "x": 3000,
        "y": 560,
        "wires": [],
        "l": true
    },
    {
        "id": "6d7486e2afc97f13",
        "type": "switch",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Is Analysis Missing?",
        "property": "payload[0].gcode_analysis_data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3220,
        "y": 660,
        "wires": [
            [
                "9fb13978446f7b8a"
            ]
        ]
    },
    {
        "id": "9fb13978446f7b8a",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Prepare G-code Download",
        "func": "const device = msg.original_device_config;\nconst filename = msg.params[13];\n\n// Store these for the final database update\nmsg.device_id_for_update = msg.params[1];\nmsg.filename_for_update = filename;\n\nmsg.headers = { 'X-Api-Key': device.api_key };\nmsg.url = `http://${device.api_ip}/api/files/local/${filename}`;\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 700,
        "wires": [
            [
                "8b6805e59ca0e048"
            ]
        ]
    },
    {
        "id": "8b6805e59ca0e048",
        "type": "http request",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Download G-code File",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3300,
        "y": 740,
        "wires": [
            [
                "e5f04ef6f5bc94fc"
            ]
        ]
    },
    {
        "id": "e5f04ef6f5bc94fc",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Parse G-code & Prep DB",
        "func": "const gcodeText = msg.payload;\nif (typeof gcodeText !== 'string' || gcodeText.length === 0) {\n    node.warn(\"G-code content was empty, skipping analysis.\");\n    return null;\n}\n\n// --- JavaScript version of your Python parser ---\nconst metadata = {};\nconst pattern_equals = /^;\\s*([^=]+?)\\s*=\\s*(.*)/;\nconst lines = gcodeText.split('\\\\n');\n\nfor (const line of lines) {\n    const match = line.match(pattern_equals);\n    if (match) {\n        const key = match[1].trim();\n        const value = match[2].trim();\n        metadata[key] = value;\n    }\n}\n\nconst analysis_data = {};\nif (metadata.layer_height) {\n    analysis_data.layerHeight = parseFloat(metadata.layer_height);\n}\nif (metadata.model_size) {\n    const dims = metadata.model_size.split(',');\n    if (dims.length === 3) {\n        analysis_data.modelSize = {\n            x: parseFloat(dims[0]),\n            y: parseFloat(dims[1]),\n            z: parseFloat(dims[2])\n        };\n    }\n}\n// --- End of parser ---\n\n// Prepare parameters for the final database update\nmsg.params = [\n    JSON.stringify(analysis_data), // The new analysis object\n    msg.device_id_for_update,\n    msg.filename_for_update\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "f3858a8857ffde13",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Get Previous State",
        "func": "// Get the device_id from the incoming message\nconst deviceId = msg.payload.device_id;\n\n// Retrieve the last known status for this specific device from flow-level memory.\n// The '|| {}' provides a safe default if nothing is stored yet.\nconst lastStatus = flow.get('printer_status_' + deviceId) || {};\n\n// Attach the retrieved last_status to the message so subsequent nodes can access it\nmsg.last_status = lastStatus;\n\n// Pass the message along the flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "f297e1970a6e9404"
            ]
        ]
    },
    {
        "id": "81d3cb6157d204a7",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Prepare Final Energy Query",
        "func": "// This function will receive a message with device_id and filename\nconst device_id = msg.params[0];\nconst filename = msg.params[1];\n\n// This query will calculate and update the session_energy_wh in one go\nmsg.topic = \"UPDATE_FINAL_ENERGY\";\nmsg.query = `\n    WITH final_energy AS (\n        SELECT energy_total_wh\n        FROM energy_data\n        WHERE device_id = $1\n        ORDER BY timestamp DESC\n        LIMIT 1\n    )\n    UPDATE print_jobs\n    SET session_energy_wh = final_energy.energy_total_wh - print_jobs.start_energy_wh\n    FROM final_energy\n    WHERE print_jobs.device_id = $1\n    AND print_jobs.filename = $2\n    AND print_jobs.start_energy_wh IS NOT NULL;\n`;\nmsg.params = [device_id, filename]; // Parameters for the query\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 700,
        "wires": [
            [
                "76e36f5c70691ad5"
            ]
        ]
    },
    {
        "id": "76e36f5c70691ad5",
        "type": "link out",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Trigger Final Energy Calc",
        "mode": "link",
        "links": [],
        "x": 1930,
        "y": 760,
        "wires": [],
        "l": true,
        "info": "This node triggers the separate Historical Enrichment Flow, which is a major processing step"
    },
    {
        "id": "d43ff076a1a9a7bf",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Call SimplyPrint API output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 660,
        "wires": []
    },
    {
        "id": "b9a4c25e40aeeef0",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Prepare SimplyPrint Request output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 600,
        "wires": []
    },
    {
        "id": "d72cfa8a09b4ac1a",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Output 1: Route by Data Source Strategy",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 420,
        "wires": []
    },
    {
        "id": "8df1e9e0aa3c3d82",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Group 1: Data Input & Routing",
        "info": "This group's responsibility is to fetch the raw data from its source (the database for configuration, and then the printer APIs).",
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "abc0bca12f6f89e4",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Group 2: Data Processing & Enrichment",
        "info": "    This group takes the raw API data, parses it, standardizes it, detects job state changes, and triggers further enrichment processes.",
        "x": 2310,
        "y": 460,
        "wires": []
    },
    {
        "id": "711e7c68cc8edf38",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "5f3f1baac114fb7c",
        "name": "Group 3: Data Output",
        "info": "This group's sole responsibility is to take the fully processed and standardized data and save it to the database. It is primarily composed of your \"database sink\" nodes.\n",
        "x": 2900,
        "y": 100,
        "wires": []
    },
    {
        "id": "7e24e1bcd17d804e",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "DB: Get Device Configurations",
        "info": "**Purpose:** Fetches the configuration for all active 3D printers from the `devices` table in the database.\n\n**Trigger:** Fired every 30 seconds by the \"Poll All Printers\" inject node.\n\n**Output:**\n- `msg.payload`: An array of objects, where each object is a row from the `devices` table.\n\n**Next Step:** The payload is passed to a `split` node to process each device individually.",
        "x": 490,
        "y": 260,
        "wires": [],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "fa5fe3526a66b815",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "Route: PrusaLink or SimplyPrint?",
        "info": "**Purpose:** Inspects the configuration for a single device and routes the flow based on the data source available.\n\n**Inputs:**\n- `msg.payload`: A single device object from the database.\n\n**Logic:**\n- If `api_ip` exists, the device uses the local PrusaLink API. The message is sent to **Output 1**.\n- If `simplyprint_id` exists, the device is managed via the SimplyPrint cloud service. The message is sent to **Output 2**.\n- If neither exists, the message is dropped.\n\n**Outputs:**\n- **Output 1:** For PrusaLink devices.\n- **Output 2:** For SimplyPrint devices.",
        "x": 370,
        "y": 480,
        "wires": []
    },
    {
        "id": "ad0abf33e2e61735",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "API: Get Prusa Printer State",
        "info": "**Purpose:** Makes an HTTP GET request to the `/api/printer` endpoint of a local PrusaLink-enabled printer.\n\n**Inputs:**\n- `msg.url`: The target URL (e.g., http://192.168.1.10/api/printer).\n- `msg.headers`: Contains the `X-Api-Key` for authentication.\n- `msg.original_device_config`: The full database row for this device is preserved for later use.\n\n**Output:**\n- `msg.payload`: The JSON response from the printer, containing state, temperatures, and flags.\n- `msg.original_device_config`: The original device config is passed through.\n\n**Next Step:** The response is passed to the \"Prepare Prusa /job Request\" node to make the second required API call.",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "721f5a33a2061419",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Process: Parse PrusaLink Response & Detect Job State",
        "info": "**Purpose:** This is the main processing hub for PrusaLink devices. It combines the `/printer` and `/job` API responses, standardizes the data, and detects if a print job has just started or finished.\n\n**Inputs:**\n- `msg.printer_api_response`: The JSON response from the `/printer` endpoint.\n- `msg.payload`: The JSON response from the `/job` endpoint.\n- `msg.original_device_config`: The full database config for the device.\n- `msg.last_status`: The previous state of the printer (is_printing, filename) retrieved from flow memory.\n\n**Logic:**\n1.  Compares `is_printing_now` with `was_printing` from the previous cycle.\n2.  **Job Start Detection:** If `!was_printing && is_printing_now`, it triggers the \"Record Start Energy\" subflow.\n3.  **Job End Detection:** If `was_printing && !is_printing_now`, it triggers the \"Calculate Final Energy\" subflow.\n4.  Formats the combined data into a standardized structure for the `printer_status` database table.\n\n**Outputs:**\n- **Output 1:** A message with standardized `params` for inserting into the `printer_status` table. Sent on every poll.\n- **Output 2:** A trigger message (`CALCULATE_FINAL_ENERGY`) sent *only* when a job has just finished.",
        "x": 2000,
        "y": 520,
        "wires": []
    },
    {
        "id": "f81e90cc3d42a0f9",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Trigger: Enrich SimplyPrint Job",
        "info": "**Purpose:** For SimplyPrint devices, this node triggers the \"Historical Enrichment Flow\".\n\n**Logic:**\n- It passes the live API response and the device's database configuration to the subflow.\n- The subflow is responsible for making additional API calls to SimplyPrint to get rich details about the current job (e.g., filament usage, start/end times, G-code analysis data).\n- This separation keeps the main flow clean, delegating the complex enrichment logic to a dedicated subflow.\n\n**Next Step:** The \"Historical Enrichment Flow\" will execute and eventually send messages to the \"Data Output\" link-in nodes (`Upsert to print_jobs`, `Insert to printer_status`, etc.).",
        "x": 3030,
        "y": 520,
        "wires": []
    },
    {
        "id": "52a6268367a8d644",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "DB: Is G-code Analyzed?",
        "info": "**Purpose:** Prevents re-analyzing the G-code for a print job that is already in progress and has been analyzed.\n\n**Inputs:**\n- `msg.params`: Contains the `device_id` and `filename`.\n\n**Logic:**\n- Queries the `print_jobs` table to check if the `gcode_analysis_data` column is `NULL` for the current job.\n- If the column is `NULL` (meaning it needs analysis), the message is passed to the \"Is Analysis Missing?\" switch.\n\n**Next Step:** If analysis is needed, the flow proceeds to download and parse the G-code file.",
        "x": 2890,
        "y": 620,
        "wires": [],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "af3255605d249b0d",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Process: Parse G-code Metadata",
        "info": "**Purpose:** Parses the downloaded G-code file text to extract key metadata left by the slicer (e.g., PrusaSlicer).\n\n**Inputs:**\n- `msg.payload`: The raw text content of the `.gcode` file.\n\n**Logic:**\n- Uses regular expressions to find and extract key-value pairs from the G-code comments (lines starting with `;`).\n- It specifically looks for metadata like `layer_height`, `model_size`, etc.\n- The extracted metadata is formatted into a JSON object.\n\n**Output:**\n- `msg.params`: An array containing the JSON analysis data, `device_id`, and `filename`, ready for the final database `UPDATE` query.",
        "x": 3670,
        "y": 820,
        "wires": []
    },
    {
        "id": "f571406301ee9470",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "5f3f1baac114fb7c",
        "name": "DB: Insert/Update Printer Status",
        "info": "**Purpose:** Inserts a new row into the `printer_status` time-series table. This serves as a log of the printer's state at a specific point in time.\n\n**Triggered By:**\n- The \"Parse PrusaLink Data\" node for Prusa printers.\n- The \"Historical Enrichment Flow\" for SimplyPrint printers.\n\n**Logic:**\n- The incoming message contains `msg.params`, an array with all the required data points (timestamp, device_id, temps, state, etc.) in a standardized format.\n- An `INSERT` query is executed. It uses `ON CONFLICT DO UPDATE` to handle rare cases of duplicate timestamps, ensuring the latest data is always present.",
        "x": 3170,
        "y": 160,
        "wires": [],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "526fc8f040df3cba",
        "type": "comment",
        "z": "c4582a5c3c4d6d09",
        "g": "5f3f1baac114fb7c",
        "name": "DB: Upsert Print Job",
        "info": "**Purpose:** Inserts a new record into the `print_jobs` table when a job is first detected, or updates an existing record as more details become available (e.g., final status, filament usage).\n\n**Triggered By:**\n- The \"Historical Enrichment Flow\" after fetching job details from the SimplyPrint API.\n\n**Logic:**\n- Uses `INSERT ... ON CONFLICT (simplyprint_job_id) DO UPDATE`.\n- This allows the flow to create the job record once and then enrich it over time without creating duplicates.",
        "x": 3130,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "075caf0daf376cc6",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Prepare Job Analysis Check",
        "func": "const device_id = msg.params[1];\nconst filename = msg.params[13];\n\n// --- THIS IS THE FIX ---\n// Overwrite msg.params with a NEW array containing ONLY the 2 parameters\n// that the \"Check if Job Analyzed\" node is expecting.\nmsg.params = [device_id, filename];\n\n// We also need to preserve the original device configuration from the start of the flow\n// so that we can use it later to get the api_ip and api_key for downloading the G-code.\nmsg.preserved_device_config = msg.original_device_config;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "de12c14d1a3c57d5",
        "type": "switch",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Is Analysis Missing?",
        "property": "payload[0].gcode_analysis_data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2640,
        "y": 820,
        "wires": [
            [
                "f56cc50a4481ddce"
            ]
        ]
    },
    {
        "id": "f56cc50a4481ddce",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Build PrusaLink G-code URL",
        "func": "// The device config was preserved in the \"Prepare Analysis Check\" node.\nconst device = msg.preserved_device_config;\n// The filename was the second parameter we set.\nconst filename = msg.params[1];\n\n// Preserve the device_id and filename for the final database update.\nmsg.device_id_for_update = msg.params[0];\nmsg.filename_for_update = msg.params[1];\n\n// PrusaLink API endpoint for downloading a file from the local SD card.\nmsg.url = `http://${device.api_ip}/api/files/local/${encodeURIComponent(filename)}`;\n\nmsg.headers = {\n    'X-Api-Key': device.api_key\n};\n\n// Clear payload for the GET request.\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 860,
        "wires": [
            [
                "31b1ea47700de376"
            ]
        ]
    },
    {
        "id": "31b1ea47700de376",
        "type": "http request",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "API: Download G-code",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2740,
        "y": 900,
        "wires": [
            [
                "4958a8c7f64eaabd"
            ]
        ]
    },
    {
        "id": "4958a8c7f64eaabd",
        "type": "file",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Save to /tmp/prusa_gcode.gcode",
        "filename": "/tmp/prusa_gcode.gcode",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2820,
        "y": 940,
        "wires": [
            [
                "af950d41f1c8252e"
            ]
        ]
    },
    {
        "id": "af950d41f1c8252e",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Build Prusa Analyzer Command",
        "func": "const unique_job_id = msg.device_id_for_update + '_' + msg.filename_for_update;\nconst gcodePath = \"/tmp/prusa_gcode.gcode\"; // ensure your flow writes the file here (inside the container)\nmsg.payload = `/data/scripts/gcode_analyzer.py --file \"${gcodePath}\" --jobid \"${unique_job_id}\"`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 980,
        "wires": [
            [
                "b8edd70e91510d03"
            ]
        ]
    },
    {
        "id": "b8edd70e91510d03",
        "type": "exec",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run G-code Analyzer",
        "x": 2880,
        "y": 1020,
        "wires": [
            [
                "19af9013e2ec06d3"
            ],
            [],
            []
        ]
    },
    {
        "id": "19af9013e2ec06d3",
        "type": "json",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Parse Analyzer Output",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2940,
        "y": 1060,
        "wires": [
            [
                "cb5a40c591c23af4"
            ]
        ]
    },
    {
        "id": "cb5a40c591c23af4",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Prepare Prusa Analysis for DB",
        "func": "const analysisResult = msg.payload;\n\n// Stop if the script failed to produce a thumbnail.\nif (!analysisResult || !analysisResult.thumbnail_url) {\n    node.warn(\"Prusa G-code analysis did not return a thumbnail. Stopping.\");\n    return null;\n}\n\n// Prepare parameters for the final SQL UPDATE query.\n// [$1: analysis_data, $2: thumbnail_url, $3: device_id, $4: filename]\nmsg.params = [\n    JSON.stringify(analysisResult),\n    analysisResult.thumbnail_url,\n    msg.device_id_for_update,\n    msg.filename_for_update\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "08941a4001c4ec9a",
        "type": "inject",
        "z": "c4582a5c3c4d6d09",
        "g": "b1bed7a2a4a4d39a",
        "name": "3389466",
        "props": [
            {
                "p": "original_device_config",
                "v": "{\"device_id\":\"prusa_i3_mk2_virtuell_schreibtisch\",\"device_model\":\"i3 MK2\",\"shelly_id\":null,\"api_ip\":null,\"api_key\":null,\"friendly_name\":\"Prusa i3 MK2 virtuell Schreibtisch\",\"location\":\"Fab Lab Fabulous St. Pauli\",\"notes\":null,\"printer_size_category\":\"Unknown\",\"simplyprint_id\":\"35675\",\"last_seen\":\"2025-07-18T06:26:34.482Z\",\"sp_company_id\":\"17378\",\"sp_api_key\":\"a012f5a8-4046-4fb5-98fe-a95d977fa3c5\",\"gcode_preview_host\":null,\"gcode_preview_api_key\":null,\"bed_width\":250,\"bed_depth\":210}",
                "vt": "json"
            },
            {
                "p": "payload"
            },
            {
                "p": "live_data",
                "v": "{\"data\":[{\"id\":35675,\"job\":{\"uid\":\"4f200e18-2230-4425-96cc-c1c5eec3e820\"},\"printer\":{\"state\":\"operational\"}}]}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":[{\"id\":35675,\"job\":{\"uid\":\"4f200e18-2230-4425-96cc-c1c5eec3e820\"},\"printer\":{\"state\":\"operational\"}}]}",
        "payloadType": "json",
        "x": 360,
        "y": 720,
        "wires": [
            [
                "5dda7fb58e2cb2a2"
            ]
        ]
    },
    {
        "id": "95202ab5fa233a47",
        "type": "function",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "Format Params for Analysis Check",
        "func": "// This function receives the full message with 16 parameters from the main status update.\n// It correctly extracts only the two parameters needed for the next database node.\n\n// Preserve the original device config for the download step later in the chain.\nmsg.preserved_device_config = msg.original_device_config;\n\n// Overwrite msg.params with a new array containing only device_id and filename.\nmsg.params = [\n    msg.params[1], // device_id\n    msg.params[13] // filename\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "cda295997d384d1b",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 580,
        "wires": []
    },
    {
        "id": "1a68329a7809840d",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 780,
        "wires": []
    },
    {
        "id": "853372a55c401c65",
        "type": "debug",
        "z": "c4582a5c3c4d6d09",
        "g": "39cad17b39cec1d1",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 600,
        "wires": []
    },
    {
        "id": "31749266865874cf",
        "type": "link in",
        "z": "088fab733419c707",
        "g": "d46e71e1a4ec093a",
        "name": "Get Rich Details for Job1",
        "links": [
            "5dda7fb58e2cb2a2"
        ],
        "x": 370,
        "y": 460,
        "wires": [
            [
                "9253f90316936f73"
            ]
        ],
        "l": true,
        "info": "**Purpose:** The entry point for this sub-flow. It listens for trigger messages from the main `Master Ingestion Flow`.\r\n\r\n**Input:** A `msg` object containing `msg.original_device_config` and `msg.payload` (with the live data from the initial poll)."
    },
    {
        "id": "9253f90316936f73",
        "type": "function",
        "z": "088fab733419c707",
        "g": "d46e71e1a4ec093a",
        "name": "Prepare Single Job Request",
        "func": "const live_data = msg.payload;\nconst device = msg.original_device_config;\n\n// --- DYNAMICALLY FIND THE CORRECT PRINTER ---\nconst target_printer_id = parseInt(device.simplyprint_id, 10);\nconst printer_data = live_data.data?.find(p => p.id === target_printer_id);\n\nif (!printer_data) {\n    node.error(`Prepare Request Error: Did not find printer with ID ${target_printer_id} in API response.`, msg);\n    return null;\n}\n\nmsg.live_data = live_data;\n\n// --- CHECK FOR JOB UID ---\nconst job_uid = printer_data?.job?.uid;\n\nif (!job_uid) {\n    msg.payload = {};\n    return [null, msg]; // Bypass to output 2\n}\n\n// --- PREPARE THE JOB DETAILS REQUEST ---\nconst url = `https://api.simplyprint.io/${device.sp_company_id}/jobs/GetDetails?id=${job_uid}`;\n\n// --- NEW LOGGING ---\nnode.log(\"-----------------------------------------\");\nnode.log(`Found job_uid: ${job_uid}`);\nnode.log(`Preparing to call URL: ${url}`);\nnode.log(\"-----------------------------------------\");\n// --- END NEW LOGGING ---\n\nmsg.method = \"GET\";\nmsg.headers = { 'X-API-KEY': device.sp_api_key };\nmsg.url = url;\nmsg.payload = {};\n\nreturn [msg, null]; // Continue to HTTP Request node",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "4582f5ee6c82a831",
                "856d2b19e2a0d021"
            ],
            [
                "4abf6ef935ae28bb",
                "bc7506c79a70c5d8"
            ]
        ],
        "info": "**Purpose:** Prepares the API call to fetch detailed information for the currently active print job.\r\n\r\n**Logic:**\r\n1.  Finds the specific printer's data within the `live_data` payload.\r\n2.  Extracts the unique job identifier (`job_uid`). If no job is active, the flow is bypassed.\r\n3.  Constructs the specific URL for the SimplyPrint `/jobs/GetDetails` API endpoint using the `job_uid`.\r\n\r\n**Output:** A correctly formatted `msg` object with `msg.url` and `msg.headers` ready for the `http request` node."
    },
    {
        "id": "4abf6ef935ae28bb",
        "type": "function",
        "z": "088fab733419c707",
        "g": "2406f1dc5d32b76a",
        "name": "Parse and Merge All Data",
        "func": "// --- Get data from previous nodes --- \nconst job_details = msg.payload.job;\nconst live_data = msg.live_data;\nconst device = msg.original_device_config;\nconst last_status = flow.get('printer_status_' + device.device_id) || {};\n\n// --- Find the correct printer ---\nconst target_printer_id = parseInt(device.simplyprint_id, 10);\nconst api_response_data = live_data.data?.find(p => p.id === target_printer_id);\n\nif (!api_response_data) {\n    node.error(`Parse/Merge Error: Did not find printer with ID ${target_printer_id}.`, msg);\n    return null;\n}\n\n// --- Unify the Filename and State ---\nconst current_filename = job_details?.file || api_response_data.job?.file || null;\nconst stateText = api_response_data.printer?.state?.charAt(0).toUpperCase() + api_response_data.printer.state.slice(1) || 'Unknown';\nconst is_printing_now = ['printing', 'heating'].includes(stateText.toLowerCase());\nconst was_printing = last_status.is_printing ?? false;\n\n// --- Initialize all outgoing messages ---\nlet msg_job_upsert = null;\nlet msg_status_update = null;\nlet msg_end_of_job = null;\nlet msg_start_energy_trigger = null;\nlet msg_gcode_analysis_trigger = null;\n\n// --- Job Completion Detection ---\nif (was_printing && !is_printing_now && last_status.filename) {\n    msg_end_of_job = {\n        topic: \"CALCULATE_FINAL_ENERGY\",\n        params: [last_status.device_id, last_status.filename]\n    };\n}\n\n// --- Update flow memory for the NEXT cycle ---\nflow.set('printer_status_' + device.device_id, {\n    is_printing: is_printing_now,\n    filename: current_filename,\n    device_id: device.device_id\n});\n\n// --- Prepare Status Update ---\n// --- Prepare Status Update ---\nmsg_status_update = {\n    topic: \"INSERT_PRINTER_STATUS\",\n    params: [\n        new Date().toISOString(), // 1\n        device.device_id, // 2\n        stateText, // 3\n        stateText.toLowerCase() !== 'offline', // 4\n        is_printing_now, // 5\n        stateText.toLowerCase() === 'paused', // 6\n        stateText.toLowerCase() === 'error', // 7\n        ['printing', 'paused', 'heating'].includes(stateText.toLowerCase()), // 8\n        api_response_data.printer.temps?.current?.tool?.[0] ?? null, // 9\n        api_response_data.printer.temps?.target?.tool?.[0] ?? null, // 10\n        api_response_data.printer.temps?.current?.bed ?? null, // 11\n        api_response_data.printer.temps?.target?.bed ?? null, // 12\n        api_response_data.filament?.[0]?.type?.name ?? null, // 13\n        current_filename, // 14\n        api_response_data.job?.percentage ?? null, // 15\n        api_response_data.job?.time ?? null, // 16\n        // THE NEW PARAMETER\n        api_response_data.printer.temps?.ambient ?? null // 17\n    ]\n};\n\n// --- Prepare Job Upsert, Triggers, and NEW Part Metadata Logic ---\nif (job_details && job_details.id) {\n    const gcodeAnalysis = job_details.analysis ? JSON.stringify(job_details.analysis) : null;\n    let filamentGrams = null;\n    if (job_details.filament?.e0?.fil?.[0]?.gram) {\n        filamentGrams = job_details.filament.e0.fil[0].gram;\n    }\n\n// ================== NEW LOGIC START ==================\nlet partMetadata = null;\nif (Array.isArray(job_details.customFields) && job_details.customFields.length > 0) {\n    const modelDataField = job_details.customFields.find(field => field.id === 'modeldata');\n    \n    if (modelDataField && modelDataField.value && typeof modelDataField.value.string === 'string') {\n        let rawString = modelDataField.value.string;\n        \n        try {\n            // Find the first occurrence of '['\n            const startIndex = rawString.indexOf('[');\n            // Find the last occurrence of ']'\n            const endIndex = rawString.lastIndexOf(']');\n            \n            if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {\n                // Extract the substring between the first '[' and last ']'\n                let jsonArrayString = rawString.substring(startIndex, endIndex + 1);\n                \n                // Replace all single quotes with double quotes\n                jsonArrayString = jsonArrayString.replace(/'/g, '\"');\n                \n                // Parse the clean string\n                partMetadata = JSON.parse(jsonArrayString);\n            } else {\n                node.warn(`Could not find a JSON array '[...]' in modelData string: ${rawString}`);\n            }\n\n        } catch (e) {\n            node.warn(`Could not parse cleaned modelData for job ${job_details.id}. Error: ${e.message}`);\n        }\n    }\n}\n// =================== NEW LOGIC END ===================\n    msg_job_upsert = {\n        topic: \"UPSERT_PRINT_JOB\",\n        params: [\n            job_details.id.toString(), // 1\n            device.device_id, // 2\n            job_details.started, // 3\n            job_details.ended, // 4\n            job_details.totalPrintTime, // 5\n\n            // CORRECTED: Use the detailed state from the job_details\n            job_details.state, // 6\n\n            current_filename, // 7\n            filamentGrams, // 8\n            gcodeAnalysis, // 9\n            partMetadata ? JSON.stringify(partMetadata) : null, // 10\n\n            // NEW PARAMETERS\n            job_details.analysis?.nozzleSize ?? null, // 11 - Get nozzle size from analysis\n            msg.payload.filament?.[0]?.dia ?? null // 12 - Get filament diameter from main payload\n        ]\n    };\n\n    if (is_printing_now && !was_printing && current_filename) {\n        msg_start_energy_trigger = {\n            topic: \"RECORD_START_ENERGY\",\n            params: [device.device_id, current_filename]\n        };\n    }\n\n    if (current_filename && device.gcode_preview_host && device.gcode_preview_api_key) {\n        msg_gcode_analysis_trigger = {\n            topic: \"ANALYZE_GCODE\",\n            job_id: job_details.id.toString(),\n            filename: current_filename,\n            gcode_host: device.gcode_preview_host,\n            gcode_api_key: device.gcode_preview_api_key,\n            job_details: job_details,\n            original_device_config: device\n        };\n    }\n}\n\nreturn [msg_job_upsert, msg_status_update, msg_end_of_job, msg_start_energy_trigger, msg_gcode_analysis_trigger];",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 460,
        "wires": [
            [
                "566c89287199eab1"
            ],
            [
                "d980d78960bfd999"
            ],
            [
                "235f4c81c8825e75"
            ],
            [
                "11be79141838bc02"
            ],
            [
                "548b0a238325e0b8"
            ]
        ],
        "info": "**Purpose:** The central processing hub of this entire flow. It merges all available data sources (live poll, detailed job API) and determines what actions need to be taken.\r\n\r\n**Logic:**\r\n1.  Detects job start/end transitions and prepares trigger messages for energy calculations.\r\n2.  Standardizes the printer status data for insertion into the `printer_status` table.\r\n3.  Parses the `modelData` from the `customFields` array.\r\n4.  Prepares a complete message with all job details (`filament_used_g`, `part_metadata`, etc.) for insertion into the `print_jobs` table.\r\n5.  Prepares a trigger message for the G-code analysis pipeline if a job is active.\r\n\r\n**Outputs:** This node has 5 outputs, each sending a different, specialized message to a `link out` node to trigger a specific action in the main flow or other subflows."
    },
    {
        "id": "566c89287199eab1",
        "type": "link out",
        "z": "088fab733419c707",
        "g": "2406f1dc5d32b76a",
        "name": "Upsert to print_jobs",
        "mode": "link",
        "links": [
            "bf152e33e1198b2b"
        ],
        "x": 1570,
        "y": 360,
        "wires": [],
        "l": true,
        "info": "**Purpose:** Acts as a named portal to send a fully prepared message back to the `Data Output` section of the `Master Ingestion Flow`. This keeps the flow diagram clean by avoiding long wires. This specific link sends the message to update the `print_jobs` table."
    },
    {
        "id": "d980d78960bfd999",
        "type": "link out",
        "z": "088fab733419c707",
        "g": "2406f1dc5d32b76a",
        "name": "Insert to printer_status",
        "mode": "link",
        "links": [
            "af2f0b8c71e0ef6c"
        ],
        "x": 1580,
        "y": 420,
        "wires": [],
        "l": true
    },
    {
        "id": "4582f5ee6c82a831",
        "type": "http request",
        "z": "088fab733419c707",
        "g": "d46e71e1a4ec093a",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 400,
        "wires": [
            [
                "4abf6ef935ae28bb"
            ]
        ],
        "info": "**Purpose:** Executes the API call to SimplyPrint to get the rich, detailed data for the specific job.\r\n\r\n**Output:** `msg.payload` will contain the full JSON response from the SimplyPrint API for that job, including start/end times, filament usage, and any `customFields`."
    },
    {
        "id": "235f4c81c8825e75",
        "type": "link out",
        "z": "088fab733419c707",
        "g": "2406f1dc5d32b76a",
        "name": "Trigger Final Energy Calc",
        "mode": "link",
        "links": [],
        "x": 1590,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "11be79141838bc02",
        "type": "link out",
        "z": "088fab733419c707",
        "g": "2406f1dc5d32b76a",
        "name": "link out 2",
        "mode": "link",
        "links": [],
        "x": 1540,
        "y": 520,
        "wires": [],
        "l": true
    },
    {
        "id": "548b0a238325e0b8",
        "type": "function",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Build G-code Download URL",
        "func": "// This node now builds the direct API call and PRESERVES critical data for later nodes.\n\n// --- PRESERVE DATA ---\n// We are copying the data we need into new 'preserved_' properties.\n// This protects them from being overwritten by the http request or exec nodes.\nmsg.preserved_job_id = msg.job_id;\nmsg.preserved_device_config = msg.original_device_config;\nmsg.preserved_job_details = msg.job_details;\n// -------------------\n\nconst device = msg.original_device_config;\n\nmsg.url = `https://api.simplyprint.io/${device.sp_company_id}/jobs/${msg.job_details.uid}/gcode`;\n\nmsg.headers = {\n    'X-API-KEY': device.sp_api_key\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 660,
        "wires": [
            [
                "70cdf05dcd27462d"
            ]
        ],
        "info": "**Purpose:** Constructs the correct API URL to download the G-code file for the current job from SimplyPrint.\r\n**Important:** This node was recently fixed to use the correct `/jobs/{uid}/gcode` endpoint. It also preserves key information like the `job_id` for later steps."
    },
    {
        "id": "70cdf05dcd27462d",
        "type": "http request",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Download G-code",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 720,
        "wires": [
            [
                "7ac7a420743ace0c"
            ]
        ]
    },
    {
        "id": "7ac7a420743ace0c",
        "type": "file",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Save G-code to /tmp",
        "filename": "/tmp/temp_gcode.gcode",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1660,
        "y": 780,
        "wires": [
            [
                "c8a9510c9ac279b9"
            ]
        ]
    },
    {
        "id": "1895161b40f4b2c6",
        "type": "exec",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run G-code Analyzer",
        "x": 1680,
        "y": 900,
        "wires": [
            [
                "637017bc129598ca"
            ],
            [
                "8e468d1a2e629d6c"
            ],
            [
                "00554013c989e511"
            ]
        ],
        "info": "**Purpose:** Executes the `gcode_analyzer.py` script to extract the thumbnail and perform per-part volume analysis.\r\n**Logic:** It passes the path to the temporarily saved G-code file (`/tmp/temp_gcode.gcode`) and the `job_id` to the script."
    },
    {
        "id": "a849c171e8e54fe4",
        "type": "change",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Prepare Analysis for DB",
        "rules": [
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "[payload.thumbnail_url, payload.per_part_analysis, preserved_job_id]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "637017bc129598ca",
        "type": "json",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Parse Analyzer Output",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1960,
        "y": 900,
        "wires": [
            [
                "a849c171e8e54fe4"
            ]
        ]
    },
    {
        "id": "856d2b19e2a0d021",
        "type": "debug",
        "z": "088fab733419c707",
        "g": "d46e71e1a4ec093a",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "bc7506c79a70c5d8",
        "type": "debug",
        "z": "088fab733419c707",
        "g": "d46e71e1a4ec093a",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 560,
        "wires": []
    },
    {
        "id": "00554013c989e511",
        "type": "debug",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 960,
        "wires": []
    },
    {
        "id": "8e468d1a2e629d6c",
        "type": "debug",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c8a9510c9ac279b9",
        "type": "function",
        "z": "088fab733419c707",
        "g": "ec87e2210a0fba2e",
        "name": "Build Analyzer Command",
        "func": "// Build exec args using env var; Exec node already runs `python3`\nconst base = env.get('PROJECT_PY') || '/opt/enms/python-api';\nconst gcodeFile = '/tmp/temp_gcode.gcode';\nconst jobid = Number(msg.preserved_job_id || msg.job_id);\n\nif (!Number.isFinite(jobid)) {\n    node.error('Missing/invalid job id', msg);\n    return null;\n}\n\n// IMPORTANT: payload must be ONLY script + args (NO \"python3\" here)\nmsg.payload = `${base}/gcode_analyzer.py --file \"${gcodeFile}\" --jobid ${jobid}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 840,
        "wires": [
            [
                "1895161b40f4b2c6"
            ]
        ]
    },
    {
        "id": "92452866bea7cba8",
        "type": "trigger",
        "z": "bc5759d43e341d79",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "IDLE",
        "bytopic": "all",
        "topic": "payload.printerstate",
        "outputs": 1,
        "x": 480,
        "y": 220,
        "wires": [
            [
                "fdc652a7508e741c"
            ]
        ]
    },
    {
        "id": "ed90336a02b6df04",
        "type": "inject",
        "z": "bc5759d43e341d79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "printertype",
                "v": "PRUSAMINI",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "RUN",
        "payloadType": "str",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "92452866bea7cba8"
            ]
        ]
    },
    {
        "id": "fdc652a7508e741c",
        "type": "function",
        "z": "bc5759d43e341d79",
        "name": "function 4",
        "func": "msg.payload = process.cwd();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 180,
        "wires": [
            [
                "bbfa39068bd9e37b"
            ]
        ]
    },
    {
        "id": "bbfa39068bd9e37b",
        "type": "debug",
        "z": "bc5759d43e341d79",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 180,
        "wires": []
    },
    {
        "id": "a54183831d4cfd61",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-influxdb": "0.6.1",
            "node-red-dashboard": "3.6.6",
            "node-red-contrib-watt2kwh": "0.1.2",
            "node-red-contrib-python-function": "0.0.5"
        }
    }
]